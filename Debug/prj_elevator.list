
prj_elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00006058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  00006058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00005df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08004e00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000058  08004e58  00006058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004e58  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a5a  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bad  00000000  00000000  00017ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb6  00000000  00000000  0001b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034b8  00000000  00000000  0001c37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001467d  00000000  00000000  0001f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905bd  00000000  00000000  00033eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  000c44b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c87c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000058 	.word	0x20000058
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004d44 	.word	0x08004d44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	08004d44 	.word	0x08004d44

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <delay_us>:
 */


#include "delay_us.h"

void delay_us(uint16_t us){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <delay_us+0x30>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 8000516:	bf00      	nop
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <delay_us+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	429a      	cmp	r2, r3
 8000522:	d3f9      	bcc.n	8000518 <delay_us+0x14>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000210 	.word	0x20000210

08000538 <seg_number_CA>:
    0x5f, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x3d, 0x76, 0x11, 0x0d, 0x75, 0x38, 0x55, 0x54, 0x5c, 0x73, 0x67, 0x50, 0x2d, 0x78, 0x1c, 0x2a, 0x6a, 0x14, 0x6e, 0x1b
};



void seg_number_CA(int number) {    										// 애노드 공통, 이상하게 나오면 캐소드 공통 사용.
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(FND_PORT_7, FND_PIN_7, (~Seg_num[number]&0x01));		// 함수를 호출 후 괄호 안에 0~9의 숫자를 넣으면 해당 숫자 FND에 출력.
 8000540:	4a41      	ldr	r2, [pc, #260]	@ (8000648 <seg_number_CA+0x110>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf0c      	ite	eq
 8000550:	2301      	moveq	r3, #1
 8000552:	2300      	movne	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055c:	483b      	ldr	r0, [pc, #236]	@ (800064c <seg_number_CA+0x114>)
 800055e:	f001 ff69 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_6, FND_PIN_6, ((~Seg_num[number]&0x02)>>1));
 8000562:	4a39      	ldr	r2, [pc, #228]	@ (8000648 <seg_number_CA+0x110>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	43db      	mvns	r3, r3
 800056c:	105b      	asrs	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800057c:	4834      	ldr	r0, [pc, #208]	@ (8000650 <seg_number_CA+0x118>)
 800057e:	f001 ff59 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_4, FND_PIN_4, ((~Seg_num[number]&0x04)>>2));
 8000582:	4a31      	ldr	r2, [pc, #196]	@ (8000648 <seg_number_CA+0x110>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	43db      	mvns	r3, r3
 800058c:	109b      	asrs	r3, r3, #2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	461a      	mov	r2, r3
 8000598:	2120      	movs	r1, #32
 800059a:	482d      	ldr	r0, [pc, #180]	@ (8000650 <seg_number_CA+0x118>)
 800059c:	f001 ff4a 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_2, FND_PIN_2, ((~Seg_num[number]&0x08)>>3));
 80005a0:	4a29      	ldr	r2, [pc, #164]	@ (8000648 <seg_number_CA+0x110>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	43db      	mvns	r3, r3
 80005aa:	10db      	asrs	r3, r3, #3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	2108      	movs	r1, #8
 80005b8:	4825      	ldr	r0, [pc, #148]	@ (8000650 <seg_number_CA+0x118>)
 80005ba:	f001 ff3b 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_1, FND_PIN_1, ((~Seg_num[number]&0x10)>>4));
 80005be:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <seg_number_CA+0x110>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	43db      	mvns	r3, r3
 80005c8:	111b      	asrs	r3, r3, #4
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d8:	481e      	ldr	r0, [pc, #120]	@ (8000654 <seg_number_CA+0x11c>)
 80005da:	f001 ff2b 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_9, FND_PIN_9, ((~Seg_num[number]&0x20)>>5));
 80005de:	4a1a      	ldr	r2, [pc, #104]	@ (8000648 <seg_number_CA+0x110>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	43db      	mvns	r3, r3
 80005e8:	115b      	asrs	r3, r3, #5
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f8:	4816      	ldr	r0, [pc, #88]	@ (8000654 <seg_number_CA+0x11c>)
 80005fa:	f001 ff1b 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_10, FND_PIN_10, ((~Seg_num[number]&0x40)>>6));
 80005fe:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <seg_number_CA+0x110>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	43db      	mvns	r3, r3
 8000608:	119b      	asrs	r3, r3, #6
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000618:	480e      	ldr	r0, [pc, #56]	@ (8000654 <seg_number_CA+0x11c>)
 800061a:	f001 ff0b 	bl	8002434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_PORT_5, FND_PIN_5, (~Seg_num[number]&0x80)>>7);
 800061e:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <seg_number_CA+0x110>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	43db      	mvns	r3, r3
 8000628:	11db      	asrs	r3, r3, #7
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <seg_number_CA+0x118>)
 800063a:	f001 fefb 	bl	8002434 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	40020800 	.word	0x40020800
 8000650:	40020400 	.word	0x40020400
 8000654:	40020000 	.word	0x40020000

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b5a      	ldr	r3, [pc, #360]	@ (80007dc <MX_GPIO_Init+0x184>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <MX_GPIO_Init+0x184>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b57      	ldr	r3, [pc, #348]	@ (80007dc <MX_GPIO_Init+0x184>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b53      	ldr	r3, [pc, #332]	@ (80007dc <MX_GPIO_Init+0x184>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a52      	ldr	r2, [pc, #328]	@ (80007dc <MX_GPIO_Init+0x184>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b50      	ldr	r3, [pc, #320]	@ (80007dc <MX_GPIO_Init+0x184>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b4c      	ldr	r3, [pc, #304]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a4b      	ldr	r2, [pc, #300]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b49      	ldr	r3, [pc, #292]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a44      	ldr	r2, [pc, #272]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <MX_GPIO_Init+0x184>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 51ff 	mov.w	r1, #8160	@ 0x1fe0
 80006e4:	483e      	ldr	r0, [pc, #248]	@ (80007e0 <MX_GPIO_Init+0x188>)
 80006e6:	f001 fea5 	bl	8002434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 80006ea:	2200      	movs	r2, #0
 80006ec:	f24f 613a 	movw	r1, #63034	@ 0xf63a
 80006f0:	483c      	ldr	r0, [pc, #240]	@ (80007e4 <MX_GPIO_Init+0x18c>)
 80006f2:	f001 fe9f 	bl	8002434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80006fc:	483a      	ldr	r0, [pc, #232]	@ (80007e8 <MX_GPIO_Init+0x190>)
 80006fe:	f001 fe99 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC5 PC6
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000702:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8000706:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000708:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4833      	ldr	r0, [pc, #204]	@ (80007e8 <MX_GPIO_Init+0x190>)
 800071a:	f001 fd07 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800071e:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 8000722:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	482a      	ldr	r0, [pc, #168]	@ (80007e0 <MX_GPIO_Init+0x188>)
 8000738:	f001 fcf8 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 800073c:	f24f 633a 	movw	r3, #63034	@ 0xf63a
 8000740:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <MX_GPIO_Init+0x18c>)
 8000756:	f001 fce9 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800075a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	481d      	ldr	r0, [pc, #116]	@ (80007e8 <MX_GPIO_Init+0x190>)
 8000774:	f001 fcda 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000778:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4816      	ldr	r0, [pc, #88]	@ (80007e8 <MX_GPIO_Init+0x190>)
 8000790:	f001 fccc 	bl	800212c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2008      	movs	r0, #8
 800079a:	f001 fc90 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800079e:	2008      	movs	r0, #8
 80007a0:	f001 fca9 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2009      	movs	r0, #9
 80007aa:	f001 fc88 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007ae:	2009      	movs	r0, #9
 80007b0:	f001 fca1 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	2017      	movs	r0, #23
 80007ba:	f001 fc80 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007be:	2017      	movs	r0, #23
 80007c0:	f001 fc99 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2028      	movs	r0, #40	@ 0x28
 80007ca:	f001 fc78 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ce:	2028      	movs	r0, #40	@ 0x28
 80007d0:	f001 fc91 	bl	80020f6 <HAL_NVIC_EnableIRQ>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800

080007ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_I2C1_Init+0x50>)
 800082a:	f001 fe35 	bl	8002498 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fdc6 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000074 	.word	0x20000074
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a19      	ldr	r2, [pc, #100]	@ (80008cc <HAL_I2C_MspInit+0x84>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12b      	bne.n	80008c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <HAL_I2C_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <HAL_I2C_MspInit+0x88>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_I2C_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000886:	23c0      	movs	r3, #192	@ 0xc0
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088a:	2312      	movs	r3, #18
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000896:	2304      	movs	r3, #4
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <HAL_I2C_MspInit+0x8c>)
 80008a2:	f001 fc43 	bl	800212c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_I2C_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_I2C_MspInit+0x88>)
 80008b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_I2C_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	@ 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40005400 	.word	0x40005400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400

080008d8 <lcdCommand>:
#include "string.h"

extern I2C_HandleTypeDef hi2c1;


void lcdCommand(uint8_t command) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af02      	add	r7, sp, #8
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f023 030f 	bic.w	r3, r3, #15
 80008e8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command << 4) & 0xf0;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08;	// en = 1, rx = 0, rw = 0, bl = 1
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f043 030c 	orr.w	r3, r3, #12
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08;	// en = 0, rx = 0, rw = 0, bl = 1
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	b2db      	uxtb	r3, r3
 8000902:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08;	// en = 1, rx = 0, rw = 0, bl = 1
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	f043 030c 	orr.w	r3, r3, #12
 800090a:	b2db      	uxtb	r3, r3
 800090c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08;	// en = 0, rx = 0, rw = 0, bl = 1
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	b2db      	uxtb	r3, r3
 8000916:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 8000918:	bf00      	nop
 800091a:	f107 0208 	add.w	r2, r7, #8
 800091e:	2364      	movs	r3, #100	@ 0x64
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2304      	movs	r3, #4
 8000924:	214e      	movs	r1, #78	@ 0x4e
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <lcdCommand+0x64>)
 8000928:	f001 fefa 	bl	8002720 <HAL_I2C_Master_Transmit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f3      	bne.n	800091a <lcdCommand+0x42>
}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000074 	.word	0x20000074

08000940 <lcdData>:

void lcdData(uint8_t data) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f023 030f 	bic.w	r3, r3, #15
 8000950:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data << 4) & 0xf0;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	f043 030d 	orr.w	r3, r3, #13
 800095e:	b2db      	uxtb	r3, r3
 8000960:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	f043 0309 	orr.w	r3, r3, #9
 8000968:	b2db      	uxtb	r3, r3
 800096a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08;
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	f043 030d 	orr.w	r3, r3, #13
 8000972:	b2db      	uxtb	r3, r3
 8000974:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08;
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	f043 0309 	orr.w	r3, r3, #9
 800097c:	b2db      	uxtb	r3, r3
 800097e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 8000980:	bf00      	nop
 8000982:	f107 0208 	add.w	r2, r7, #8
 8000986:	2364      	movs	r3, #100	@ 0x64
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2304      	movs	r3, #4
 800098c:	214e      	movs	r1, #78	@ 0x4e
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <lcdData+0x64>)
 8000990:	f001 fec6 	bl	8002720 <HAL_I2C_Master_Transmit>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f3      	bne.n	8000982 <lcdData+0x42>
}
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000074 	.word	0x20000074

080009a8 <i2cLcd_Init>:

void i2cLcd_Init() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80009ac:	2032      	movs	r0, #50	@ 0x32
 80009ae:	f001 fa87 	bl	8001ec0 <HAL_Delay>
	lcdCommand(0x33);
 80009b2:	2033      	movs	r0, #51	@ 0x33
 80009b4:	f7ff ff90 	bl	80008d8 <lcdCommand>
	HAL_Delay(5);
 80009b8:	2005      	movs	r0, #5
 80009ba:	f001 fa81 	bl	8001ec0 <HAL_Delay>
	lcdCommand(0x32);
 80009be:	2032      	movs	r0, #50	@ 0x32
 80009c0:	f7ff ff8a 	bl	80008d8 <lcdCommand>
	HAL_Delay(5);
 80009c4:	2005      	movs	r0, #5
 80009c6:	f001 fa7b 	bl	8001ec0 <HAL_Delay>
	lcdCommand(0x28);
 80009ca:	2028      	movs	r0, #40	@ 0x28
 80009cc:	f7ff ff84 	bl	80008d8 <lcdCommand>
	HAL_Delay(5);
 80009d0:	2005      	movs	r0, #5
 80009d2:	f001 fa75 	bl	8001ec0 <HAL_Delay>
	lcdCommand(DISPLAY_ON);
 80009d6:	200c      	movs	r0, #12
 80009d8:	f7ff ff7e 	bl	80008d8 <lcdCommand>
	HAL_Delay(5);
 80009dc:	2005      	movs	r0, #5
 80009de:	f001 fa6f 	bl	8001ec0 <HAL_Delay>
	lcdCommand(0x06);
 80009e2:	2006      	movs	r0, #6
 80009e4:	f7ff ff78 	bl	80008d8 <lcdCommand>
	HAL_Delay(5);
 80009e8:	2005      	movs	r0, #5
 80009ea:	f001 fa69 	bl	8001ec0 <HAL_Delay>
	lcdCommand(CLEAR_DISPLAY);	// 약 2ms 필요
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff ff72 	bl	80008d8 <lcdCommand>
	HAL_Delay(2);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f001 fa63 	bl	8001ec0 <HAL_Delay>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}

080009fe <lcdString>:

void lcdString(char *str) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	while(*str)lcdData(*str++);
 8000a06:	e006      	b.n	8000a16 <lcdString+0x18>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff95 	bl	8000940 <lcdData>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f4      	bne.n	8000a08 <lcdString+0xa>
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <moveCursor>:

void moveCursor(uint8_t row, uint8_t col) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	lcdCommand(0x80 | row << 6 | col);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	019b      	lsls	r3, r3, #6
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff44 	bl	80008d8 <lcdCommand>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <ledOn>:
		{GPIOA, GPIO_PIN_8, 1, 0},
		{GPIOB, GPIO_PIN_10, 1, 0},
		{GPIOB, GPIO_PIN_4, 1, 0},
};

void ledOn(uint8_t num) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i <= num; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e013      	b.n	8000a90 <ledOn+0x38>
		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <ledOn+0x4c>)
 8000a6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <ledOn+0x4c>)
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	4413      	add	r3, r2
 8000a78:	8899      	ldrh	r1, [r3, #4]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <ledOn+0x4c>)
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	4413      	add	r3, r2
 8000a82:	799b      	ldrb	r3, [r3, #6]
 8000a84:	461a      	mov	r2, r3
 8000a86:	f001 fcd5 	bl	8002434 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i <= num; i++) {
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d9e7      	bls.n	8000a68 <ledOn+0x10>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000000c 	.word	0x2000000c

08000aa8 <ledLS>:
void ledToggle(uint8_t num) {

}


void ledLS(uint8_t num) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i <= num; i++) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e013      	b.n	8000ae0 <ledLS+0x38>
		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <ledLS+0x88>)
 8000abc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <ledLS+0x88>)
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	8899      	ldrh	r1, [r3, #4]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4a18      	ldr	r2, [pc, #96]	@ (8000b30 <ledLS+0x88>)
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f001 fcad 	bl	8002434 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i <= num; i++) {
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	3301      	adds	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d9e7      	bls.n	8000ab8 <ledLS+0x10>
	}
	//	for(int i = num; i >= 0; i--) {
	//		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
	//		HAL_Delay(100);
	//	}
	for(uint8_t i = num; ; i--) {
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <ledLS+0x88>)
 8000af0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <ledLS+0x88>)
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4413      	add	r3, r2
 8000afc:	8899      	ldrh	r1, [r3, #4]
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <ledLS+0x88>)
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	79db      	ldrb	r3, [r3, #7]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f001 fc93 	bl	8002434 <HAL_GPIO_WritePin>
		delay_us(65000);
 8000b0e:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000b12:	f7ff fcf7 	bl	8000504 <delay_us>
		if(i == 0){
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <ledLS+0x7c>
	for(uint8_t i = num; ; i--) {
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 8000b22:	e7e3      	b.n	8000aec <ledLS+0x44>
			break;
 8000b24:	bf00      	nop
		}
	}
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000000c 	.word	0x2000000c

08000b34 <ledRS>:
void ledRS(uint8_t num) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i <= num; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e013      	b.n	8000b6c <ledRS+0x38>
		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].onState);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	4a1d      	ldr	r2, [pc, #116]	@ (8000bbc <ledRS+0x88>)
 8000b48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <ledRS+0x88>)
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	8899      	ldrh	r1, [r3, #4]
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <ledRS+0x88>)
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	799b      	ldrb	r3, [r3, #6]
 8000b60:	461a      	mov	r2, r3
 8000b62:	f001 fc67 	bl	8002434 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i <= num; i++) {
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	7bfa      	ldrb	r2, [r7, #15]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d9e7      	bls.n	8000b44 <ledRS+0x10>
	}
	for(uint8_t i = 0; i <= num; i++) {
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
 8000b78:	e017      	b.n	8000baa <ledRS+0x76>
		HAL_GPIO_WritePin(led[i].port, led[i].pinNumber, led[i].offState);
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <ledRS+0x88>)
 8000b7e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <ledRS+0x88>)
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	4413      	add	r3, r2
 8000b8a:	8899      	ldrh	r1, [r3, #4]
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <ledRS+0x88>)
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	79db      	ldrb	r3, [r3, #7]
 8000b96:	461a      	mov	r2, r3
 8000b98:	f001 fc4c 	bl	8002434 <HAL_GPIO_WritePin>
		delay_us(65000);
 8000b9c:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000ba0:	f7ff fcb0 	bl	8000504 <delay_us>
	for(uint8_t i = 0; i <= num; i++) {
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	73bb      	strb	r3, [r7, #14]
 8000baa:	7bba      	ldrb	r2, [r7, #14]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d9e3      	bls.n	8000b7a <ledRS+0x46>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000000c 	.word	0x2000000c

08000bc0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8) {
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd0:	d10c      	bne.n	8000bec <HAL_GPIO_EXTI_Callback+0x2c>
		photo_int_1_state = 1;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
		photo_int_2_state = 0;
 8000bd8:	4b30      	ldr	r3, [pc, #192]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
		photo_int_3_state = 0;
 8000bde:	4b30      	ldr	r3, [pc, #192]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
		buzzerState = 1;
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
		button_2_state = 0;
		button_3_state = 1;
		lcdState = 1;
//		doorState = 1;
	}
}
 8000bea:	e04f      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0xcc>
	else if(GPIO_Pin == GPIO_PIN_6) {
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	2b40      	cmp	r3, #64	@ 0x40
 8000bf0:	d10c      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0x4c>
		photo_int_1_state = 0;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
		photo_int_2_state = 1;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
		photo_int_3_state = 0;
 8000bfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
		buzzerState = 1;
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	e03f      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0xcc>
	else if(GPIO_Pin == GPIO_PIN_5) {
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	d10c      	bne.n	8000c2c <HAL_GPIO_EXTI_Callback+0x6c>
		photo_int_1_state = 0;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
		photo_int_2_state = 0;
 8000c18:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
		photo_int_3_state = 1;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
		buzzerState = 1;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
}
 8000c2a:	e02f      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0xcc>
	else if(GPIO_Pin == GPIO_PIN_11) {
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c32:	d10c      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0x8e>
		button_1_state = 1;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
		button_2_state = 0;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <HAL_GPIO_EXTI_Callback+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
		button_3_state = 0;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
		lcdState = 1;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	e01e      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0xcc>
	else if(GPIO_Pin == GPIO_PIN_2) {
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d10c      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0xae>
		button_1_state = 0;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
		button_2_state = 1;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_GPIO_EXTI_Callback+0xec>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
		button_3_state = 0;
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
		lcdState = 1;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	e00e      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0xcc>
	else if(GPIO_Pin == GPIO_PIN_3) {
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d10b      	bne.n	8000c8c <HAL_GPIO_EXTI_Callback+0xcc>
		button_1_state = 0;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
		button_2_state = 0;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_GPIO_EXTI_Callback+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
		button_3_state = 1;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
		lcdState = 1;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	200000c8 	.word	0x200000c8
 8000c9c:	200000cc 	.word	0x200000cc
 8000ca0:	200000d0 	.word	0x200000d0
 8000ca4:	200000e8 	.word	0x200000e8
 8000ca8:	200000d4 	.word	0x200000d4
 8000cac:	200000d8 	.word	0x200000d8
 8000cb0:	200000dc 	.word	0x200000dc
 8000cb4:	200000e0 	.word	0x200000e0

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f001 f88e 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 fb18 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f7ff fcc8 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 ffec 	bl	8001ca4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000ccc:	f000 fed6 	bl	8001a7c <MX_TIM11_Init>
  MX_I2C1_Init();
 8000cd0:	f7ff fd8c 	bl	80007ec <MX_I2C1_Init>
  MX_TIM10_Init();
 8000cd4:	f000 feae 	bl	8001a34 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000cd8:	f000 fd8e 	bl	80017f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cdc:	f000 fe02 	bl	80018e4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ce0:	f000 fe4e 	bl	8001980 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 8000ce4:	48a3      	ldr	r0, [pc, #652]	@ (8000f74 <main+0x2bc>)
 8000ce6:	f002 fd5d 	bl	80037a4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 8000cea:	48a3      	ldr	r0, [pc, #652]	@ (8000f78 <main+0x2c0>)
 8000cec:	f002 fdb4 	bl	8003858 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	48a2      	ldr	r0, [pc, #648]	@ (8000f7c <main+0x2c4>)
 8000cf4:	f002 fe90 	bl	8003a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	48a1      	ldr	r0, [pc, #644]	@ (8000f80 <main+0x2c8>)
 8000cfc:	f002 fe8c 	bl	8003a18 <HAL_TIM_PWM_Start>
  i2cLcd_Init();
 8000d00:	f7ff fe52 	bl	80009a8 <i2cLcd_Init>


  while(1) {
	  justTurn();
 8000d04:	f000 fb64 	bl	80013d0 <justTurn>
	  if(photo_int_1_state == 1) {
 8000d08:	4b9e      	ldr	r3, [pc, #632]	@ (8000f84 <main+0x2cc>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <main+0x6a>
		  fullStop();
 8000d10:	f000 fbd6 	bl	80014c0 <fullStop>
		  button_1_state = 1;
 8000d14:	4b9c      	ldr	r3, [pc, #624]	@ (8000f88 <main+0x2d0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
		  lcdState = 1;
 8000d1a:	4b9c      	ldr	r3, [pc, #624]	@ (8000f8c <main+0x2d4>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
		  break;
 8000d20:	e019      	b.n	8000d56 <main+0x9e>
	  }
	  else if(photo_int_2_state == 1) {
 8000d22:	4b9b      	ldr	r3, [pc, #620]	@ (8000f90 <main+0x2d8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d108      	bne.n	8000d3c <main+0x84>
		  fullStop();
 8000d2a:	f000 fbc9 	bl	80014c0 <fullStop>
		  button_2_state = 1;
 8000d2e:	4b99      	ldr	r3, [pc, #612]	@ (8000f94 <main+0x2dc>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		  lcdState = 1;
 8000d34:	4b95      	ldr	r3, [pc, #596]	@ (8000f8c <main+0x2d4>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
		  break;
 8000d3a:	e00c      	b.n	8000d56 <main+0x9e>
	  }
	  else if(photo_int_3_state == 1) {
 8000d3c:	4b96      	ldr	r3, [pc, #600]	@ (8000f98 <main+0x2e0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d1df      	bne.n	8000d04 <main+0x4c>
		  fullStop();
 8000d44:	f000 fbbc 	bl	80014c0 <fullStop>
		  button_3_state = 1;
 8000d48:	4b94      	ldr	r3, [pc, #592]	@ (8000f9c <main+0x2e4>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
		  lcdState = 1;
 8000d4e:	4b8f      	ldr	r3, [pc, #572]	@ (8000f8c <main+0x2d4>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
		  break;
 8000d54:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// ------------------------------1층, 2층, 3층에 멈춰있는 구간----------------------------------------
	  if(photo_int_1_state == 1 && button_1_state == 1) {
 8000d56:	4b8b      	ldr	r3, [pc, #556]	@ (8000f84 <main+0x2cc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d155      	bne.n	8000e0a <main+0x152>
 8000d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8000f88 <main+0x2d0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d151      	bne.n	8000e0a <main+0x152>
		if(lcdState == 1) {
 8000d66:	4b89      	ldr	r3, [pc, #548]	@ (8000f8c <main+0x2d4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d117      	bne.n	8000d9e <main+0xe6>
			lcdCommand(CLEAR_DISPLAY);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff fdb2 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 8000d74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d78:	f7ff fbc4 	bl	8000504 <delay_us>
			moveCursor(0, 4);
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fe52 	bl	8000a28 <moveCursor>
			lcdString("Welcome");
 8000d84:	4886      	ldr	r0, [pc, #536]	@ (8000fa0 <main+0x2e8>)
 8000d86:	f7ff fe3a 	bl	80009fe <lcdString>
			moveCursor(1, 3);
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fe4b 	bl	8000a28 <moveCursor>
			lcdString("1st Floor");
 8000d92:	4884      	ldr	r0, [pc, #528]	@ (8000fa4 <main+0x2ec>)
 8000d94:	f7ff fe33 	bl	80009fe <lcdString>
			lcdState = 0;
 8000d98:	4b7c      	ldr	r3, [pc, #496]	@ (8000f8c <main+0x2d4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
		}
		seg_number_CA(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff fbca 	bl	8000538 <seg_number_CA>
		fullStop();
 8000da4:	f000 fb8c 	bl	80014c0 <fullStop>
		ledOn(7);
 8000da8:	2007      	movs	r0, #7
 8000daa:	f7ff fe55 	bl	8000a58 <ledOn>
		if(buzzerState == 1) {
 8000dae:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa8 <main+0x2f0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d118      	bne.n	8000de8 <main+0x130>
			TIM5->CCR2 = 194;
 8000db6:	4b7d      	ldr	r3, [pc, #500]	@ (8000fac <main+0x2f4>)
 8000db8:	22c2      	movs	r2, #194	@ 0xc2
 8000dba:	639a      	str	r2, [r3, #56]	@ 0x38
			delay_us(65000);
 8000dbc:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000dc0:	f7ff fba0 	bl	8000504 <delay_us>
			delay_us(65000);
 8000dc4:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000dc8:	f7ff fb9c 	bl	8000504 <delay_us>
			delay_us(65000);
 8000dcc:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000dd0:	f7ff fb98 	bl	8000504 <delay_us>
			delay_us(65000);
 8000dd4:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000dd8:	f7ff fb94 	bl	8000504 <delay_us>
			TIM5->CCR2 = 0;
 8000ddc:	4b73      	ldr	r3, [pc, #460]	@ (8000fac <main+0x2f4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	639a      	str	r2, [r3, #56]	@ 0x38
			buzzerState = 0;
 8000de2:	4b71      	ldr	r3, [pc, #452]	@ (8000fa8 <main+0x2f0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		}
		if(doorState == 0) {
 8000de8:	4b71      	ldr	r3, [pc, #452]	@ (8000fb0 <main+0x2f8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f040 8272 	bne.w	80012d6 <main+0x61e>
			delay_us(65000);
 8000df2:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000df6:	f7ff fb85 	bl	8000504 <delay_us>
			TIM2->CCR1 = 30;
 8000dfa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dfe:	221e      	movs	r2, #30
 8000e00:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 1;
 8000e02:	4b6b      	ldr	r3, [pc, #428]	@ (8000fb0 <main+0x2f8>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
		if(doorState == 0) {
 8000e08:	e265      	b.n	80012d6 <main+0x61e>
		}
	}
	else if(photo_int_2_state == 1 && button_2_state == 1) {
 8000e0a:	4b61      	ldr	r3, [pc, #388]	@ (8000f90 <main+0x2d8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d155      	bne.n	8000ebe <main+0x206>
 8000e12:	4b60      	ldr	r3, [pc, #384]	@ (8000f94 <main+0x2dc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d151      	bne.n	8000ebe <main+0x206>
		if(lcdState == 1) {
 8000e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8000f8c <main+0x2d4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d117      	bne.n	8000e52 <main+0x19a>
			lcdCommand(CLEAR_DISPLAY);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fd58 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 8000e28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e2c:	f7ff fb6a 	bl	8000504 <delay_us>
			moveCursor(0, 4);
 8000e30:	2104      	movs	r1, #4
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fdf8 	bl	8000a28 <moveCursor>
			lcdString("Welcome");
 8000e38:	4859      	ldr	r0, [pc, #356]	@ (8000fa0 <main+0x2e8>)
 8000e3a:	f7ff fde0 	bl	80009fe <lcdString>
			moveCursor(1, 3);
 8000e3e:	2103      	movs	r1, #3
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fdf1 	bl	8000a28 <moveCursor>
			lcdString("2nd Floor");
 8000e46:	485b      	ldr	r0, [pc, #364]	@ (8000fb4 <main+0x2fc>)
 8000e48:	f7ff fdd9 	bl	80009fe <lcdString>
			lcdState = 0;
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f8c <main+0x2d4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
		}
		seg_number_CA(2);
 8000e52:	2002      	movs	r0, #2
 8000e54:	f7ff fb70 	bl	8000538 <seg_number_CA>
		fullStop();
 8000e58:	f000 fb32 	bl	80014c0 <fullStop>
		ledOn(7);
 8000e5c:	2007      	movs	r0, #7
 8000e5e:	f7ff fdfb 	bl	8000a58 <ledOn>
		if(buzzerState == 1) {
 8000e62:	4b51      	ldr	r3, [pc, #324]	@ (8000fa8 <main+0x2f0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d118      	bne.n	8000e9c <main+0x1e4>
			TIM5->CCR2 = 194;
 8000e6a:	4b50      	ldr	r3, [pc, #320]	@ (8000fac <main+0x2f4>)
 8000e6c:	22c2      	movs	r2, #194	@ 0xc2
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38
			delay_us(65000);
 8000e70:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000e74:	f7ff fb46 	bl	8000504 <delay_us>
			delay_us(65000);
 8000e78:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000e7c:	f7ff fb42 	bl	8000504 <delay_us>
			delay_us(65000);
 8000e80:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000e84:	f7ff fb3e 	bl	8000504 <delay_us>
			delay_us(65000);
 8000e88:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000e8c:	f7ff fb3a 	bl	8000504 <delay_us>
			TIM5->CCR2 = 0;
 8000e90:	4b46      	ldr	r3, [pc, #280]	@ (8000fac <main+0x2f4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	639a      	str	r2, [r3, #56]	@ 0x38
			buzzerState = 0;
 8000e96:	4b44      	ldr	r3, [pc, #272]	@ (8000fa8 <main+0x2f0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
		}
		if(doorState == 0) {
 8000e9c:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <main+0x2f8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 8218 	bne.w	80012d6 <main+0x61e>
			delay_us(65000);
 8000ea6:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000eaa:	f7ff fb2b 	bl	8000504 <delay_us>
			TIM2->CCR1 = 30;
 8000eae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb2:	221e      	movs	r2, #30
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 1;
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <main+0x2f8>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
		if(doorState == 0) {
 8000ebc:	e20b      	b.n	80012d6 <main+0x61e>
		}
	}
	else if(photo_int_3_state == 1 && button_3_state == 1) {
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <main+0x2e0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d17a      	bne.n	8000fbc <main+0x304>
 8000ec6:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <main+0x2e4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d176      	bne.n	8000fbc <main+0x304>
		if(lcdState == 1) {
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <main+0x2d4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d117      	bne.n	8000f06 <main+0x24e>
			lcdCommand(CLEAR_DISPLAY);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fcfe 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 8000edc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ee0:	f7ff fb10 	bl	8000504 <delay_us>
			moveCursor(0, 4);
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fd9e 	bl	8000a28 <moveCursor>
			lcdString("Welcome");
 8000eec:	482c      	ldr	r0, [pc, #176]	@ (8000fa0 <main+0x2e8>)
 8000eee:	f7ff fd86 	bl	80009fe <lcdString>
			moveCursor(1, 3);
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fd97 	bl	8000a28 <moveCursor>
			lcdString("3rd Floor");
 8000efa:	482f      	ldr	r0, [pc, #188]	@ (8000fb8 <main+0x300>)
 8000efc:	f7ff fd7f 	bl	80009fe <lcdString>
			lcdState = 0;
 8000f00:	4b22      	ldr	r3, [pc, #136]	@ (8000f8c <main+0x2d4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		}
		seg_number_CA(3);
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff fb16 	bl	8000538 <seg_number_CA>
		fullStop();
 8000f0c:	f000 fad8 	bl	80014c0 <fullStop>
		ledOn(7);
 8000f10:	2007      	movs	r0, #7
 8000f12:	f7ff fda1 	bl	8000a58 <ledOn>
		if(buzzerState == 1) {
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <main+0x2f0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d118      	bne.n	8000f50 <main+0x298>
			TIM5->CCR2 = 194;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <main+0x2f4>)
 8000f20:	22c2      	movs	r2, #194	@ 0xc2
 8000f22:	639a      	str	r2, [r3, #56]	@ 0x38
			delay_us(65000);
 8000f24:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000f28:	f7ff faec 	bl	8000504 <delay_us>
			delay_us(65000);
 8000f2c:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000f30:	f7ff fae8 	bl	8000504 <delay_us>
			delay_us(65000);
 8000f34:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000f38:	f7ff fae4 	bl	8000504 <delay_us>
			delay_us(65000);
 8000f3c:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000f40:	f7ff fae0 	bl	8000504 <delay_us>
			TIM5->CCR2 = 0;
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <main+0x2f4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38
			buzzerState = 0;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <main+0x2f0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		}
		if(doorState == 0) {
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <main+0x2f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f040 81be 	bne.w	80012d6 <main+0x61e>
			delay_us(65000);
 8000f5a:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000f5e:	f7ff fad1 	bl	8000504 <delay_us>
			TIM2->CCR1 = 30;
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f66:	221e      	movs	r2, #30
 8000f68:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 1;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <main+0x2f8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
		if(doorState == 0) {
 8000f70:	e1b1      	b.n	80012d6 <main+0x61e>
 8000f72:	bf00      	nop
 8000f74:	20000210 	.word	0x20000210
 8000f78:	200001c8 	.word	0x200001c8
 8000f7c:	200000f0 	.word	0x200000f0
 8000f80:	20000180 	.word	0x20000180
 8000f84:	200000c8 	.word	0x200000c8
 8000f88:	200000d4 	.word	0x200000d4
 8000f8c:	200000e0 	.word	0x200000e0
 8000f90:	200000cc 	.word	0x200000cc
 8000f94:	200000d8 	.word	0x200000d8
 8000f98:	200000d0 	.word	0x200000d0
 8000f9c:	200000dc 	.word	0x200000dc
 8000fa0:	08004d5c 	.word	0x08004d5c
 8000fa4:	08004d64 	.word	0x08004d64
 8000fa8:	200000e8 	.word	0x200000e8
 8000fac:	40000c00 	.word	0x40000c00
 8000fb0:	200000e4 	.word	0x200000e4
 8000fb4:	08004d70 	.word	0x08004d70
 8000fb8:	08004d7c 	.word	0x08004d7c
	// ------------------------------1층, 2층, 3층에 멈춰있는 구간----------------------------------------



	// -----------------------------1층에서 2,3층 올라가는 구간-------------------------------------------
	else if(photo_int_1_state == 1 && button_2_state == 1) {
 8000fbc:	4b9a      	ldr	r3, [pc, #616]	@ (8001228 <main+0x570>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d139      	bne.n	8001038 <main+0x380>
 8000fc4:	4b99      	ldr	r3, [pc, #612]	@ (800122c <main+0x574>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d135      	bne.n	8001038 <main+0x380>
		if(doorState == 1) {
 8000fcc:	4b98      	ldr	r3, [pc, #608]	@ (8001230 <main+0x578>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10a      	bne.n	8000fea <main+0x332>
			TIM2->CCR1 = 125;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd8:	227d      	movs	r2, #125	@ 0x7d
 8000fda:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 0;
 8000fdc:	4b94      	ldr	r3, [pc, #592]	@ (8001230 <main+0x578>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
			delay_us(65000);
 8000fe2:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8000fe6:	f7ff fa8d 	bl	8000504 <delay_us>
		}
		if(lcdState == 1) {
 8000fea:	4b92      	ldr	r3, [pc, #584]	@ (8001234 <main+0x57c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d114      	bne.n	800101c <main+0x364>
			lcdCommand(CLEAR_DISPLAY);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff fc70 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 8000ff8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ffc:	f7ff fa82 	bl	8000504 <delay_us>
			moveCursor(0, 2);
 8001000:	2102      	movs	r1, #2
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fd10 	bl	8000a28 <moveCursor>
			lcdString("Please Wait");
 8001008:	488b      	ldr	r0, [pc, #556]	@ (8001238 <main+0x580>)
 800100a:	f7ff fcf8 	bl	80009fe <lcdString>
			moveCursor(1, 3);
 800100e:	2103      	movs	r1, #3
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fd09 	bl	8000a28 <moveCursor>
			lcdString("Ascending");
 8001016:	4889      	ldr	r0, [pc, #548]	@ (800123c <main+0x584>)
 8001018:	f7ff fcf1 	bl	80009fe <lcdString>
		}
		seg_number_CA(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fa8b 	bl	8000538 <seg_number_CA>
		ledRS(7);
 8001022:	2007      	movs	r0, #7
 8001024:	f7ff fd86 	bl	8000b34 <ledRS>
		rotateDegrees(300, DIR_CW, 0, &htim10);
 8001028:	4b85      	ldr	r3, [pc, #532]	@ (8001240 <main+0x588>)
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001032:	f000 fb15 	bl	8001660 <rotateDegrees>
 8001036:	e14e      	b.n	80012d6 <main+0x61e>

	}
	else if(photo_int_1_state == 1 && button_3_state == 1) {
 8001038:	4b7b      	ldr	r3, [pc, #492]	@ (8001228 <main+0x570>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d139      	bne.n	80010b4 <main+0x3fc>
 8001040:	4b80      	ldr	r3, [pc, #512]	@ (8001244 <main+0x58c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d135      	bne.n	80010b4 <main+0x3fc>
		if(doorState == 1) {
 8001048:	4b79      	ldr	r3, [pc, #484]	@ (8001230 <main+0x578>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10a      	bne.n	8001066 <main+0x3ae>
			TIM2->CCR1 = 125;
 8001050:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001054:	227d      	movs	r2, #125	@ 0x7d
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 0;
 8001058:	4b75      	ldr	r3, [pc, #468]	@ (8001230 <main+0x578>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
			delay_us(65000);
 800105e:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8001062:	f7ff fa4f 	bl	8000504 <delay_us>
		}
		if(lcdState == 1) {
 8001066:	4b73      	ldr	r3, [pc, #460]	@ (8001234 <main+0x57c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d114      	bne.n	8001098 <main+0x3e0>
			lcdCommand(CLEAR_DISPLAY);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fc32 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 8001074:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001078:	f7ff fa44 	bl	8000504 <delay_us>
			moveCursor(0, 2);
 800107c:	2102      	movs	r1, #2
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fcd2 	bl	8000a28 <moveCursor>
			lcdString("Please Wait");
 8001084:	486c      	ldr	r0, [pc, #432]	@ (8001238 <main+0x580>)
 8001086:	f7ff fcba 	bl	80009fe <lcdString>
			moveCursor(1, 3);
 800108a:	2103      	movs	r1, #3
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fccb 	bl	8000a28 <moveCursor>
			lcdString("Ascending");
 8001092:	486a      	ldr	r0, [pc, #424]	@ (800123c <main+0x584>)
 8001094:	f7ff fcb3 	bl	80009fe <lcdString>
		}
		seg_number_CA(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fa4d 	bl	8000538 <seg_number_CA>
		ledRS(7);
 800109e:	2007      	movs	r0, #7
 80010a0:	f7ff fd48 	bl	8000b34 <ledRS>
		rotateDegrees(300, DIR_CW, 0, &htim10);
 80010a4:	4b66      	ldr	r3, [pc, #408]	@ (8001240 <main+0x588>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010ae:	f000 fad7 	bl	8001660 <rotateDegrees>
 80010b2:	e110      	b.n	80012d6 <main+0x61e>
	// -----------------------------1층에서 2,3층 올라가는 구간-------------------------------------------



	// -----------------------------2층에서 1층 내려가거나/3층 올라가는 구간-------------------------------------------
	else if(photo_int_2_state == 1 && button_1_state == 1) {
 80010b4:	4b64      	ldr	r3, [pc, #400]	@ (8001248 <main+0x590>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d139      	bne.n	8001130 <main+0x478>
 80010bc:	4b63      	ldr	r3, [pc, #396]	@ (800124c <main+0x594>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d135      	bne.n	8001130 <main+0x478>
		if(doorState == 1) {
 80010c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001230 <main+0x578>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10a      	bne.n	80010e2 <main+0x42a>
			TIM2->CCR1 = 125;
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d0:	227d      	movs	r2, #125	@ 0x7d
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 0;
 80010d4:	4b56      	ldr	r3, [pc, #344]	@ (8001230 <main+0x578>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
			delay_us(65000);
 80010da:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 80010de:	f7ff fa11 	bl	8000504 <delay_us>
		}
		if(lcdState == 1) {
 80010e2:	4b54      	ldr	r3, [pc, #336]	@ (8001234 <main+0x57c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d114      	bne.n	8001114 <main+0x45c>
			lcdCommand(CLEAR_DISPLAY);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fbf4 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 80010f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010f4:	f7ff fa06 	bl	8000504 <delay_us>
			moveCursor(0, 2);
 80010f8:	2102      	movs	r1, #2
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fc94 	bl	8000a28 <moveCursor>
			lcdString("Please Wait");
 8001100:	484d      	ldr	r0, [pc, #308]	@ (8001238 <main+0x580>)
 8001102:	f7ff fc7c 	bl	80009fe <lcdString>
			moveCursor(1, 2);
 8001106:	2102      	movs	r1, #2
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff fc8d 	bl	8000a28 <moveCursor>
			lcdString("Descending");
 800110e:	4850      	ldr	r0, [pc, #320]	@ (8001250 <main+0x598>)
 8001110:	f7ff fc75 	bl	80009fe <lcdString>
		}
		seg_number_CA(2);
 8001114:	2002      	movs	r0, #2
 8001116:	f7ff fa0f 	bl	8000538 <seg_number_CA>
		ledLS(7);
 800111a:	2007      	movs	r0, #7
 800111c:	f7ff fcc4 	bl	8000aa8 <ledLS>
		rotateDegrees(300, DIR_CCW, 0, &htim10);
 8001120:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <main+0x588>)
 8001122:	2200      	movs	r2, #0
 8001124:	2101      	movs	r1, #1
 8001126:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800112a:	f000 fa99 	bl	8001660 <rotateDegrees>
 800112e:	e0d2      	b.n	80012d6 <main+0x61e>
	}
	else if(photo_int_2_state == 1 && button_3_state == 1) {
 8001130:	4b45      	ldr	r3, [pc, #276]	@ (8001248 <main+0x590>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d139      	bne.n	80011ac <main+0x4f4>
 8001138:	4b42      	ldr	r3, [pc, #264]	@ (8001244 <main+0x58c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d135      	bne.n	80011ac <main+0x4f4>
		if(doorState == 1) {
 8001140:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <main+0x578>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d10a      	bne.n	800115e <main+0x4a6>
			TIM2->CCR1 = 125;
 8001148:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800114c:	227d      	movs	r2, #125	@ 0x7d
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 0;
 8001150:	4b37      	ldr	r3, [pc, #220]	@ (8001230 <main+0x578>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
			delay_us(65000);
 8001156:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 800115a:	f7ff f9d3 	bl	8000504 <delay_us>
		}
		if(lcdState == 1) {
 800115e:	4b35      	ldr	r3, [pc, #212]	@ (8001234 <main+0x57c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d114      	bne.n	8001190 <main+0x4d8>
			lcdCommand(CLEAR_DISPLAY);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fbb6 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 800116c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001170:	f7ff f9c8 	bl	8000504 <delay_us>
			moveCursor(0, 2);
 8001174:	2102      	movs	r1, #2
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fc56 	bl	8000a28 <moveCursor>
			lcdString("Please Wait");
 800117c:	482e      	ldr	r0, [pc, #184]	@ (8001238 <main+0x580>)
 800117e:	f7ff fc3e 	bl	80009fe <lcdString>
			moveCursor(1, 3);
 8001182:	2103      	movs	r1, #3
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fc4f 	bl	8000a28 <moveCursor>
			lcdString("Ascending");
 800118a:	482c      	ldr	r0, [pc, #176]	@ (800123c <main+0x584>)
 800118c:	f7ff fc37 	bl	80009fe <lcdString>
		}
		seg_number_CA(2);
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff f9d1 	bl	8000538 <seg_number_CA>
		ledRS(7);
 8001196:	2007      	movs	r0, #7
 8001198:	f7ff fccc 	bl	8000b34 <ledRS>
		rotateDegrees(300, DIR_CW, 0, &htim10);
 800119c:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <main+0x588>)
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011a6:	f000 fa5b 	bl	8001660 <rotateDegrees>
 80011aa:	e094      	b.n	80012d6 <main+0x61e>
	// -----------------------------2층에서 1층 내려가거나/3층 올라가는 구간-------------------------------------------



	// -----------------------------3층에서 1,2층 내려가는 구간-------------------------------------------
	else if(photo_int_3_state == 1 && button_1_state == 1) {
 80011ac:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <main+0x59c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d151      	bne.n	8001258 <main+0x5a0>
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <main+0x594>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d14d      	bne.n	8001258 <main+0x5a0>
		if(doorState == 1) {
 80011bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <main+0x578>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d10a      	bne.n	80011da <main+0x522>
			TIM2->CCR1 = 125;
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c8:	227d      	movs	r2, #125	@ 0x7d
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <main+0x578>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
			delay_us(65000);
 80011d2:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 80011d6:	f7ff f995 	bl	8000504 <delay_us>
		}
		if(lcdState == 1) {
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <main+0x57c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d114      	bne.n	800120c <main+0x554>
			lcdCommand(CLEAR_DISPLAY);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff fb78 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 80011e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011ec:	f7ff f98a 	bl	8000504 <delay_us>
			moveCursor(0, 2);
 80011f0:	2102      	movs	r1, #2
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fc18 	bl	8000a28 <moveCursor>
			lcdString("Please Wait");
 80011f8:	480f      	ldr	r0, [pc, #60]	@ (8001238 <main+0x580>)
 80011fa:	f7ff fc00 	bl	80009fe <lcdString>
			moveCursor(1, 2);
 80011fe:	2102      	movs	r1, #2
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff fc11 	bl	8000a28 <moveCursor>
			lcdString("Descending");
 8001206:	4812      	ldr	r0, [pc, #72]	@ (8001250 <main+0x598>)
 8001208:	f7ff fbf9 	bl	80009fe <lcdString>
		}
		seg_number_CA(3);
 800120c:	2003      	movs	r0, #3
 800120e:	f7ff f993 	bl	8000538 <seg_number_CA>
		ledLS(7);
 8001212:	2007      	movs	r0, #7
 8001214:	f7ff fc48 	bl	8000aa8 <ledLS>
		rotateDegrees(300, DIR_CCW, 0, &htim10);
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <main+0x588>)
 800121a:	2200      	movs	r2, #0
 800121c:	2101      	movs	r1, #1
 800121e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001222:	f000 fa1d 	bl	8001660 <rotateDegrees>
 8001226:	e056      	b.n	80012d6 <main+0x61e>
 8001228:	200000c8 	.word	0x200000c8
 800122c:	200000d8 	.word	0x200000d8
 8001230:	200000e4 	.word	0x200000e4
 8001234:	200000e0 	.word	0x200000e0
 8001238:	08004d88 	.word	0x08004d88
 800123c:	08004d94 	.word	0x08004d94
 8001240:	200001c8 	.word	0x200001c8
 8001244:	200000dc 	.word	0x200000dc
 8001248:	200000cc 	.word	0x200000cc
 800124c:	200000d4 	.word	0x200000d4
 8001250:	08004da0 	.word	0x08004da0
 8001254:	200000d0 	.word	0x200000d0
	}
	else if(photo_int_3_state == 1 && button_2_state == 1) {
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <main+0x620>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	f47f ad7a 	bne.w	8000d56 <main+0x9e>
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <main+0x624>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	f47f ad75 	bne.w	8000d56 <main+0x9e>
		if(doorState == 1) {
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <main+0x628>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d10a      	bne.n	800128a <main+0x5d2>
			TIM2->CCR1 = 125;
 8001274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001278:	227d      	movs	r2, #125	@ 0x7d
 800127a:	635a      	str	r2, [r3, #52]	@ 0x34
			doorState = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <main+0x628>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
			delay_us(65000);
 8001282:	f64f 50e8 	movw	r0, #65000	@ 0xfde8
 8001286:	f7ff f93d 	bl	8000504 <delay_us>
		}
		if(lcdState == 1) {
 800128a:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <main+0x62c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d114      	bne.n	80012bc <main+0x604>
			lcdCommand(CLEAR_DISPLAY);
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fb20 	bl	80008d8 <lcdCommand>
			delay_us(2000);
 8001298:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800129c:	f7ff f932 	bl	8000504 <delay_us>
			moveCursor(0, 2);
 80012a0:	2102      	movs	r1, #2
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fbc0 	bl	8000a28 <moveCursor>
			lcdString("Please Wait");
 80012a8:	480f      	ldr	r0, [pc, #60]	@ (80012e8 <main+0x630>)
 80012aa:	f7ff fba8 	bl	80009fe <lcdString>
			moveCursor(1, 2);
 80012ae:	2102      	movs	r1, #2
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fbb9 	bl	8000a28 <moveCursor>
			lcdString("Descending");
 80012b6:	480d      	ldr	r0, [pc, #52]	@ (80012ec <main+0x634>)
 80012b8:	f7ff fba1 	bl	80009fe <lcdString>
		}
		seg_number_CA(3);
 80012bc:	2003      	movs	r0, #3
 80012be:	f7ff f93b 	bl	8000538 <seg_number_CA>
		ledLS(7);
 80012c2:	2007      	movs	r0, #7
 80012c4:	f7ff fbf0 	bl	8000aa8 <ledLS>
		rotateDegrees(300, DIR_CCW, 0, &htim10);
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <main+0x638>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	2101      	movs	r1, #1
 80012ce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012d2:	f000 f9c5 	bl	8001660 <rotateDegrees>
	  if(photo_int_1_state == 1 && button_1_state == 1) {
 80012d6:	e53e      	b.n	8000d56 <main+0x9e>
 80012d8:	200000d0 	.word	0x200000d0
 80012dc:	200000d8 	.word	0x200000d8
 80012e0:	200000e4 	.word	0x200000e4
 80012e4:	200000e0 	.word	0x200000e0
 80012e8:	08004d88 	.word	0x08004d88
 80012ec:	08004da0 	.word	0x08004da0
 80012f0:	200001c8 	.word	0x200001c8

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	@ 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fcf2 	bl	8004cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <SystemClock_Config+0xc8>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <SystemClock_Config+0xc8>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <SystemClock_Config+0xc8>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <SystemClock_Config+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <SystemClock_Config+0xcc>)
 800133e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <SystemClock_Config+0xcc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001368:	2364      	movs	r3, #100	@ 0x64
 800136a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001370:	2304      	movs	r3, #4
 8001372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fd2b 	bl	8002dd4 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001384:	f000 f81e 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2103      	movs	r1, #3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ff8d 	bl	80032c4 <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b0:	f000 f808 	bl	80013c4 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3750      	adds	r7, #80	@ 0x50
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <Error_Handler+0x8>

080013d0 <justTurn>:
//	uint16_t steps = (uint16_t)((uint32_t)(degrees * STEPS_PER_REV) / 360);
//
//	rotateSteps(steps, direction);
//}
//
void justTurn() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2102      	movs	r1, #2
 80013d8:	4838      	ldr	r0, [pc, #224]	@ (80014bc <justTurn+0xec>)
 80013da:	f001 f82b 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013e4:	4835      	ldr	r0, [pc, #212]	@ (80014bc <justTurn+0xec>)
 80013e6:	f001 f825 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013f0:	4832      	ldr	r0, [pc, #200]	@ (80014bc <justTurn+0xec>)
 80013f2:	f001 f81f 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013fc:	482f      	ldr	r0, [pc, #188]	@ (80014bc <justTurn+0xec>)
 80013fe:	f001 f819 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001408:	482c      	ldr	r0, [pc, #176]	@ (80014bc <justTurn+0xec>)
 800140a:	f001 f813 	bl	8002434 <HAL_GPIO_WritePin>
	delay_us(3000);
 800140e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001412:	f7ff f877 	bl	8000504 <delay_us>

	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2102      	movs	r1, #2
 800141a:	4828      	ldr	r0, [pc, #160]	@ (80014bc <justTurn+0xec>)
 800141c:	f001 f80a 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001426:	4825      	ldr	r0, [pc, #148]	@ (80014bc <justTurn+0xec>)
 8001428:	f001 f804 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001432:	4822      	ldr	r0, [pc, #136]	@ (80014bc <justTurn+0xec>)
 8001434:	f000 fffe 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800143e:	481f      	ldr	r0, [pc, #124]	@ (80014bc <justTurn+0xec>)
 8001440:	f000 fff8 	bl	8002434 <HAL_GPIO_WritePin>
	delay_us(3000);
 8001444:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001448:	f7ff f85c 	bl	8000504 <delay_us>

	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2102      	movs	r1, #2
 8001450:	481a      	ldr	r0, [pc, #104]	@ (80014bc <justTurn+0xec>)
 8001452:	f000 ffef 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145c:	4817      	ldr	r0, [pc, #92]	@ (80014bc <justTurn+0xec>)
 800145e:	f000 ffe9 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001468:	4814      	ldr	r0, [pc, #80]	@ (80014bc <justTurn+0xec>)
 800146a:	f000 ffe3 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001474:	4811      	ldr	r0, [pc, #68]	@ (80014bc <justTurn+0xec>)
 8001476:	f000 ffdd 	bl	8002434 <HAL_GPIO_WritePin>
	delay_us(3000);
 800147a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800147e:	f7ff f841 	bl	8000504 <delay_us>

	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <justTurn+0xec>)
 8001488:	f000 ffd4 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001492:	480a      	ldr	r0, [pc, #40]	@ (80014bc <justTurn+0xec>)
 8001494:	f000 ffce 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800149e:	4807      	ldr	r0, [pc, #28]	@ (80014bc <justTurn+0xec>)
 80014a0:	f000 ffc8 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014aa:	4804      	ldr	r0, [pc, #16]	@ (80014bc <justTurn+0xec>)
 80014ac:	f000 ffc2 	bl	8002434 <HAL_GPIO_WritePin>
	delay_us(3000);
 80014b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014b4:	f7ff f826 	bl	8000504 <delay_us>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020400 	.word	0x40020400

080014c0 <fullStop>:
//
void fullStop() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2102      	movs	r1, #2
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <fullStop+0x38>)
 80014ca:	f000 ffb3 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014d4:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <fullStop+0x38>)
 80014d6:	f000 ffad 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <fullStop+0x38>)
 80014e2:	f000 ffa7 	bl	8002434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <fullStop+0x38>)
 80014ee:	f000 ffa1 	bl	8002434 <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020400 	.word	0x40020400

080014fc <stepperSpeed>:
static const uint16_t speedTable[] = {1000, 800, 600, 400, 200}; // 속도 테이블 (Hz 단위)
#define SPEED_TABLE_SIZE (sizeof(speedTable) / sizeof(speedTable[0]))


void stepperSpeed(TIM_HandleTypeDef *htim, uint8_t speedLevel)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
    if (htim->Instance == TIM10)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <stepperSpeed+0x5c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d11c      	bne.n	800154c <stepperSpeed+0x50>
    {
        if (speedLevel >= SPEED_TABLE_SIZE) return;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d818      	bhi.n	800154a <stepperSpeed+0x4e>

        uint16_t frequency = speedTable[speedLevel]; // 속도 선택
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	4a10      	ldr	r2, [pc, #64]	@ (800155c <stepperSpeed+0x60>)
 800151c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001520:	81fb      	strh	r3, [r7, #14]
        uint16_t arr = (1000000 / frequency) - 1;    // ARR 계산 (PSC = 99 고정)
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <stepperSpeed+0x64>)
 8001526:	fb92 f3f3 	sdiv	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	81bb      	strh	r3, [r7, #12]
        htim->Instance->PSC = 100-1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2263      	movs	r2, #99	@ 0x63
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
        htim->Instance->ARR = arr;                  // ARR 설정
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	89ba      	ldrh	r2, [r7, #12]
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_TIM_SET_COUNTER(htim, 0);             // 타이머 초기화
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	@ 0x24
 8001548:	e000      	b.n	800154c <stepperSpeed+0x50>
        if (speedLevel >= SPEED_TABLE_SIZE) return;
 800154a:	bf00      	nop
    }
}
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40014400 	.word	0x40014400
 800155c:	08004dcc 	.word	0x08004dcc
 8001560:	000f4240 	.word	0x000f4240

08001564 <HAL_TIM_PeriodElapsedCallback>:
static volatile uint8_t currentStep = 0; // 현재 스텝 위치
volatile uint8_t motorDirection = DIR_CW; // 초기 방향
static volatile uint16_t remainingSteps = 0;  // 남은 스텝 수

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM10) // TIM10 인터럽트 확인
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a35      	ldr	r2, [pc, #212]	@ (8001648 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d164      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0xdc>
    {
        if (remainingSteps > 0)
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d05c      	beq.n	800163a <HAL_TIM_PeriodElapsedCallback+0xd6>
        {
            // 방향에 따라 스텝 계산
            if (motorDirection == DIR_CW)
 8001580:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10e      	bne.n	80015a8 <HAL_TIM_PeriodElapsedCallback+0x44>
            {
                currentStep = (currentStep + 1) % 8; // 시계 방향
 800158a:	4b32      	ldr	r3, [pc, #200]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3301      	adds	r3, #1
 8001592:	425a      	negs	r2, r3
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	f002 0207 	and.w	r2, r2, #7
 800159c:	bf58      	it	pl
 800159e:	4253      	negpl	r3, r2
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	e00d      	b.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0x60>
            }
            else
            {
                currentStep = (currentStep == 0) ? 7 : currentStep - 1; // 반시계 방향
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_TIM_PeriodElapsedCallback+0x5a>
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	e000      	b.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80015be:	2307      	movs	r3, #7
 80015c0:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015c2:	7013      	strb	r3, [r2, #0]
            }

            // 모터 스텝 출력
            HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, HALF_STEP_SEQ[currentStep][0]);
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015ce:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2102      	movs	r1, #2
 80015d6:	4821      	ldr	r0, [pc, #132]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015d8:	f000 ff2c 	bl	8002434 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, HALF_STEP_SEQ[currentStep][1]);
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	461a      	mov	r2, r3
 80015ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f0:	481a      	ldr	r0, [pc, #104]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015f2:	f000 ff1f 	bl	8002434 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, HALF_STEP_SEQ[currentStep][2]);
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	461a      	mov	r2, r3
 8001606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800160a:	4814      	ldr	r0, [pc, #80]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800160c:	f000 ff12 	bl	8002434 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, HALF_STEP_SEQ[currentStep][3]);
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	461a      	mov	r2, r3
 8001620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001624:	480d      	ldr	r0, [pc, #52]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001626:	f000 ff05 	bl	8002434 <HAL_GPIO_WritePin>

            // 남은 스텝 감소
            remainingSteps--;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001636:	801a      	strh	r2, [r3, #0]
        {
            // 회전 완료되었으면 타이머 정지
            HAL_TIM_Base_Stop_IT(htim);
        }
    }
}
 8001638:	e002      	b.n	8001640 <HAL_TIM_PeriodElapsedCallback+0xdc>
            HAL_TIM_Base_Stop_IT(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f002 f96e 	bl	800391c <HAL_TIM_Base_Stop_IT>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40014400 	.word	0x40014400
 800164c:	200000ee 	.word	0x200000ee
 8001650:	200000ed 	.word	0x200000ed
 8001654:	200000ec 	.word	0x200000ec
 8001658:	08004dac 	.word	0x08004dac
 800165c:	40020400 	.word	0x40020400

08001660 <rotateDegrees>:
{
    motorDirection = direction;
}

void rotateDegrees(uint16_t degrees, uint8_t direction, uint8_t speedLevel, TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4603      	mov	r3, r0
 800166a:	80fb      	strh	r3, [r7, #6]
 800166c:	460b      	mov	r3, r1
 800166e:	717b      	strb	r3, [r7, #5]
 8001670:	4613      	mov	r3, r2
 8001672:	713b      	strb	r3, [r7, #4]
    // 1도 당 몇 스텝인지 계산 (28BYJ-48의 경우 4096 스텝으로 360도 회전)
    uint16_t steps = (uint16_t)((uint32_t)degrees * 4096 / 360);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	031b      	lsls	r3, r3, #12
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <rotateDegrees+0x48>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	81fb      	strh	r3, [r7, #14]

    // 남은 스텝 수를 초기화
    remainingSteps = steps;
 8001684:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <rotateDegrees+0x4c>)
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	8013      	strh	r3, [r2, #0]

    // 속도 설정 (타이머 주파수 조정)
    stepperSpeed(htim, speedLevel);
 800168a:	793b      	ldrb	r3, [r7, #4]
 800168c:	4619      	mov	r1, r3
 800168e:	6838      	ldr	r0, [r7, #0]
 8001690:	f7ff ff34 	bl	80014fc <stepperSpeed>

    // 방향 설정 (시계방향 또는 반시계방향)
    motorDirection = direction;
 8001694:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <rotateDegrees+0x50>)
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	7013      	strb	r3, [r2, #0]

    // 타이머 인터럽트 시작
    HAL_TIM_Base_Start_IT(htim); // 타이머 인터럽트 시작
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f002 f8dc 	bl	8003858 <HAL_TIM_Base_Start_IT>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	16c16c17 	.word	0x16c16c17
 80016ac:	200000ee 	.word	0x200000ee
 80016b0:	200000ed 	.word	0x200000ed

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 fb91 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001766:	2004      	movs	r0, #4
 8001768:	f000 fe7e 	bl	8002468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001774:	2008      	movs	r0, #8
 8001776:	f000 fe77 	bl	8002468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}

0800177e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001782:	2020      	movs	r0, #32
 8001784:	f000 fe70 	bl	8002468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001788:	2040      	movs	r0, #64	@ 0x40
 800178a:	f000 fe6d 	bl	8002468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800178e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001792:	f000 fe69 	bl	8002468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017a2:	f002 f9e9 	bl	8003b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001c8 	.word	0x200001c8

080017b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <TIM3_IRQHandler+0x10>)
 80017b6:	f002 f9df 	bl	8003b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000138 	.word	0x20000138

080017c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80017c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80017cc:	f000 fe4c 	bl	8002468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	@ 0x38
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	615a      	str	r2, [r3, #20]
 8001826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 8001832:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 8001840:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001852:	4823      	ldr	r0, [pc, #140]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 8001854:	f001 ff56 	bl	8003704 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800185e:	f7ff fdb1 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186c:	4619      	mov	r1, r3
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 8001870:	f002 fb34 	bl	8003edc <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800187a:	f7ff fda3 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800187e:	4818      	ldr	r0, [pc, #96]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 8001880:	f002 f87b 	bl	800397a <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800188a:	f7ff fd9b 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	4619      	mov	r1, r3
 800189c:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 800189e:	f002 fedf 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a8:	f7ff fd8c 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	2360      	movs	r3, #96	@ 0x60
 80018ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 80018c4:	f002 fa48 	bl	8003d58 <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018ce:	f7ff fd79 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018d2:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <MX_TIM2_Init+0xe8>)
 80018d4:	f000 f988 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3738      	adds	r7, #56	@ 0x38
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000f0 	.word	0x200000f0

080018e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001902:	4a1e      	ldr	r2, [pc, #120]	@ (800197c <MX_TIM3_Init+0x98>)
 8001904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001908:	f242 720f 	movw	r2, #9999	@ 0x270f
 800190c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001916:	f242 720f 	movw	r2, #9999	@ 0x270f
 800191a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_TIM3_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	@ (8001978 <MX_TIM3_Init+0x94>)
 800192a:	f001 feeb 	bl	8003704 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001934:	f7ff fd46 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001946:	f002 fac9 	bl	8003edc <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001950:	f7ff fd38 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_TIM3_Init+0x94>)
 8001962:	f002 fe7d 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800196c:	f7ff fd2a 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000138 	.word	0x20000138
 800197c:	40000400 	.word	0x40000400

08001980 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019a4:	4a22      	ldr	r2, [pc, #136]	@ (8001a30 <MX_TIM5_Init+0xb0>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 392-1;
 80019a8:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019aa:	f240 1287 	movw	r2, #391	@ 0x187
 80019ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 389-1;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019b8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80019bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80019ca:	4818      	ldr	r0, [pc, #96]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019cc:	f001 ffd5 	bl	800397a <HAL_TIM_PWM_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80019d6:	f7ff fcf5 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	4619      	mov	r1, r3
 80019e8:	4810      	ldr	r0, [pc, #64]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019ea:	f002 fe39 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80019f4:	f7ff fce6 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	2360      	movs	r3, #96	@ 0x60
 80019fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <MX_TIM5_Init+0xac>)
 8001a10:	f002 f9a2 	bl	8003d58 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001a1a:	f7ff fcd3 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a1e:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <MX_TIM5_Init+0xac>)
 8001a20:	f000 f8e2 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000180 	.word	0x20000180
 8001a30:	40000c00 	.word	0x40000c00

08001a34 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <MX_TIM10_Init+0x44>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a40:	2263      	movs	r2, #99	@ 0x63
 8001a42:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a50:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_TIM10_Init+0x40>)
 8001a60:	f001 fe50 	bl	8003704 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001a6a:	f7ff fcab 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001c8 	.word	0x200001c8
 8001a78:	40014400 	.word	0x40014400

08001a7c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001a82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <MX_TIM11_Init+0x44>)
 8001a84:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001a88:	2263      	movs	r2, #99	@ 0x63
 8001a8a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a98:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_TIM11_Init+0x40>)
 8001aa8:	f001 fe2c 	bl	8003704 <HAL_TIM_Base_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ab2:	f7ff fc87 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000210 	.word	0x20000210
 8001ac0:	40014800 	.word	0x40014800

08001ac4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad4:	d10e      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001af2:	e04a      	b.n	8001b8a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_TIM_Base_MspInit+0xd4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d116      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a23      	ldr	r2, [pc, #140]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	201d      	movs	r0, #29
 8001b20:	f000 facd 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b24:	201d      	movs	r0, #29
 8001b26:	f000 fae6 	bl	80020f6 <HAL_NVIC_EnableIRQ>
}
 8001b2a:	e02e      	b.n	8001b8a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM10)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1a      	ldr	r2, [pc, #104]	@ (8001b9c <HAL_TIM_Base_MspInit+0xd8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d116      	bne.n	8001b64 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2019      	movs	r0, #25
 8001b58:	f000 fab1 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b5c:	2019      	movs	r0, #25
 8001b5e:	f000 faca 	bl	80020f6 <HAL_NVIC_EnableIRQ>
}
 8001b62:	e012      	b.n	8001b8a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM11)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <HAL_TIM_Base_MspInit+0xdc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10d      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_TIM_Base_MspInit+0xd0>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40014400 	.word	0x40014400
 8001ba0:	40014800 	.word	0x40014800

08001ba4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x40>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40000c00 	.word	0x40000c00
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d11f      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4816      	ldr	r0, [pc, #88]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c44:	f000 fa72 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c48:	e022      	b.n	8001c90 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11d      	bne.n	8001c90 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <HAL_TIM_MspPostInit+0xb0>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c80:	2302      	movs	r3, #2
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4804      	ldr	r0, [pc, #16]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c8c:	f000 fa4e 	bl	800212c <HAL_GPIO_Init>
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	@ 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40000c00 	.word	0x40000c00

08001ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <MX_USART2_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f002 fd42 	bl	8004764 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f7ff fb6d 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000258 	.word	0x20000258
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <HAL_UART_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d52:	230c      	movs	r3, #12
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_UART_MspInit+0x8c>)
 8001d6e:	f000 f9dd 	bl	800212c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	@ 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8c:	f7ff fd22 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f002 ffa1 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7fe ff7d 	bl	8000cb8 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001dcc:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8001dd0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001dd4:	200002a4 	.word	0x200002a4

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f94f 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fc50 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f967 	bl	8002112 <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e5c:	f000 f92f 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000004c 	.word	0x2000004c
 8001e78:	20000054 	.word	0x20000054
 8001e7c:	20000050 	.word	0x20000050

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000054 	.word	0x20000054
 8001ea4:	200002a0 	.word	0x200002a0

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200002a0 	.word	0x200002a0

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000054 	.word	0x20000054

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	@ (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff3e 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e159      	b.n	80023fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8148 	bne.w	80023f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	2b02      	cmp	r3, #2
 800217c:	d130      	bne.n	80021e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a2 	beq.w	80023f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <HAL_GPIO_Init+0x2e8>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_GPIO_Init+0x2e8>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b54      	ldr	r3, [pc, #336]	@ (8002414 <HAL_GPIO_Init+0x2e8>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a52      	ldr	r2, [pc, #328]	@ (8002418 <HAL_GPIO_Init+0x2ec>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a49      	ldr	r2, [pc, #292]	@ (800241c <HAL_GPIO_Init+0x2f0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x202>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a48      	ldr	r2, [pc, #288]	@ (8002420 <HAL_GPIO_Init+0x2f4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x1fe>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a47      	ldr	r2, [pc, #284]	@ (8002424 <HAL_GPIO_Init+0x2f8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x1fa>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a46      	ldr	r2, [pc, #280]	@ (8002428 <HAL_GPIO_Init+0x2fc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x1f6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a45      	ldr	r2, [pc, #276]	@ (800242c <HAL_GPIO_Init+0x300>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x1f2>
 800231a:	2304      	movs	r3, #4
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x204>
 800231e:	2307      	movs	r3, #7
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x204>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x204>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x204>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x204>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	@ (8002418 <HAL_GPIO_Init+0x2ec>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b38      	ldr	r3, [pc, #224]	@ (8002430 <HAL_GPIO_Init+0x304>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a2f      	ldr	r2, [pc, #188]	@ (8002430 <HAL_GPIO_Init+0x304>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_GPIO_Init+0x304>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a24      	ldr	r2, [pc, #144]	@ (8002430 <HAL_GPIO_Init+0x304>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a2:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f aea2 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40013c00 	.word	0x40013c00

08002434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
 8002440:	4613      	mov	r3, r2
 8002442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002450:	e003      	b.n	800245a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	619a      	str	r2, [r3, #24]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fb9a 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40013c00 	.word	0x40013c00

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e12b      	b.n	8002702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe f9c2 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	@ 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f001 f8da 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a81      	ldr	r2, [pc, #516]	@ (800270c <HAL_I2C_Init+0x274>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x84>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a80      	ldr	r2, [pc, #512]	@ (8002710 <HAL_I2C_Init+0x278>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x92>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a7d      	ldr	r2, [pc, #500]	@ (8002714 <HAL_I2C_Init+0x27c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e7      	b.n	8002702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a78      	ldr	r2, [pc, #480]	@ (8002718 <HAL_I2C_Init+0x280>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a6a      	ldr	r2, [pc, #424]	@ (800270c <HAL_I2C_Init+0x274>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xd4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xe8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a69      	ldr	r2, [pc, #420]	@ (800271c <HAL_I2C_Init+0x284>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	495c      	ldr	r1, [pc, #368]	@ (800270c <HAL_I2C_Init+0x274>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d819      	bhi.n	80025d4 <HAL_I2C_Init+0x13c>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025b4:	400b      	ands	r3, r1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_I2C_Init+0x138>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e59      	subs	r1, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	e051      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e04f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_I2C_Init+0x168>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e012      	b.n	8002626 <HAL_I2C_Init+0x18e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Init+0x196>
 800262a:	2301      	movs	r3, #1
 800262c:	e022      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <HAL_I2C_Init+0x1bc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e58      	subs	r0, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	440b      	add	r3, r1
 8002644:	fbb0 f3f3 	udiv	r3, r0, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	0099      	lsls	r1, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6809      	ldr	r1, [r1, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6911      	ldr	r1, [r2, #16]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	000186a0 	.word	0x000186a0
 8002710:	001e847f 	.word	0x001e847f
 8002714:	003d08ff 	.word	0x003d08ff
 8002718:	431bde83 	.word	0x431bde83
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff fbb8 	bl	8001ea8 <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 80e0 	bne.w	8002908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2319      	movs	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	4970      	ldr	r1, [pc, #448]	@ (8002914 <HAL_I2C_Master_Transmit+0x1f4>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f964 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	e0d3      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x50>
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	@ 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2210      	movs	r2, #16
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	893a      	ldrh	r2, [r7, #8]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a50      	ldr	r2, [pc, #320]	@ (8002918 <HAL_I2C_Master_Transmit+0x1f8>)
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f89c 	bl	800291c <I2C_MasterRequestWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08d      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002804:	e066      	b.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa22 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fa19 	bl	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d107      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d194      	bne.n	8002806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d006      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d003      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002944:	d108      	bne.n	8002958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	2b12      	cmp	r3, #18
 800295e:	d107      	bne.n	8002970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800296e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f84f 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e035      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029ac:	d108      	bne.n	80029c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	e01b      	b.n	80029f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	11db      	asrs	r3, r3, #7
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0306 	and.w	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f063 030f 	orn	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	490e      	ldr	r1, [pc, #56]	@ (8002a18 <I2C_MasterRequestWrite+0xfc>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f898 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e010      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <I2C_MasterRequestWrite+0x100>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f888 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010008 	.word	0x00010008
 8002a1c:	00010002 	.word	0x00010002

08002a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a30:	e048      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a38:	d044      	beq.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7ff fa35 	bl	8001ea8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d139      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e023      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	e00c      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d093      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	e071      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b32:	d123      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e067      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b82:	d041      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7ff f990 	bl	8001ea8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d136      	bne.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e021      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e00b      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af6d 	bne.w	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f886 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c78:	d028      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f915 	bl	8001ea8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d016      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d1c3      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f83e 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d08:	d028      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7ff f8cd 	bl	8001ea8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11d      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1c3      	bne.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8a:	d11b      	bne.n	8002dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e267      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d075      	beq.n	8002ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002df2:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d00c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfe:	4b85      	ldr	r3, [pc, #532]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d112      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b82      	ldr	r3, [pc, #520]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	4b7e      	ldr	r3, [pc, #504]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d05b      	beq.n	8002edc <HAL_RCC_OscConfig+0x108>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d157      	bne.n	8002edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e242      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x74>
 8002e3a:	4b76      	ldr	r3, [pc, #472]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a75      	ldr	r2, [pc, #468]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e01d      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x98>
 8002e52:	4b70      	ldr	r3, [pc, #448]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6f      	ldr	r2, [pc, #444]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6c      	ldr	r2, [pc, #432]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	4b69      	ldr	r3, [pc, #420]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a68      	ldr	r2, [pc, #416]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b66      	ldr	r3, [pc, #408]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a65      	ldr	r2, [pc, #404]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f80c 	bl	8001ea8 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7ff f808 	bl	8001ea8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e207      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0xc0>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fff8 	bl	8001ea8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fff4 	bl	8001ea8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	@ 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e1f3      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0xe8>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d063      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eea:	4b4a      	ldr	r3, [pc, #296]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d11c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b44      	ldr	r3, [pc, #272]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	4b41      	ldr	r3, [pc, #260]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x152>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e1c7      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b3b      	ldr	r3, [pc, #236]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4937      	ldr	r1, [pc, #220]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	e03a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f44:	4b34      	ldr	r3, [pc, #208]	@ (8003018 <HAL_RCC_OscConfig+0x244>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fe ffad 	bl	8001ea8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe ffa9 	bl	8001ea8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1a8      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	4b28      	ldr	r3, [pc, #160]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4925      	ldr	r1, [pc, #148]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f86:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <HAL_RCC_OscConfig+0x244>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe ff8c 	bl	8001ea8 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fe ff88 	bl	8001ea8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e187      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d036      	beq.n	800302c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <HAL_RCC_OscConfig+0x248>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe ff6c 	bl	8001ea8 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fe ff68 	bl	8001ea8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e167      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x200>
 8002ff2:	e01b      	b.n	800302c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff4:	4b09      	ldr	r3, [pc, #36]	@ (800301c <HAL_RCC_OscConfig+0x248>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe ff55 	bl	8001ea8 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	e00e      	b.n	8003020 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe ff51 	bl	8001ea8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d907      	bls.n	8003020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e150      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
 8003014:	40023800 	.word	0x40023800
 8003018:	42470000 	.word	0x42470000
 800301c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	4b88      	ldr	r3, [pc, #544]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ea      	bne.n	8003002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8097 	beq.w	8003168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b81      	ldr	r3, [pc, #516]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10f      	bne.n	800306a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b7d      	ldr	r3, [pc, #500]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	4a7c      	ldr	r2, [pc, #496]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	@ 0x40
 800305a:	4b7a      	ldr	r3, [pc, #488]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	4b77      	ldr	r3, [pc, #476]	@ (8003248 <HAL_RCC_OscConfig+0x474>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d118      	bne.n	80030a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003076:	4b74      	ldr	r3, [pc, #464]	@ (8003248 <HAL_RCC_OscConfig+0x474>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a73      	ldr	r2, [pc, #460]	@ (8003248 <HAL_RCC_OscConfig+0x474>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003082:	f7fe ff11 	bl	8001ea8 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308a:	f7fe ff0d 	bl	8001ea8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e10c      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b6a      	ldr	r3, [pc, #424]	@ (8003248 <HAL_RCC_OscConfig+0x474>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x2ea>
 80030b0:	4b64      	ldr	r3, [pc, #400]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	4a63      	ldr	r2, [pc, #396]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80030bc:	e01c      	b.n	80030f8 <HAL_RCC_OscConfig+0x324>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x30c>
 80030c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0x324>
 80030e0:	4b58      	ldr	r3, [pc, #352]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e4:	4a57      	ldr	r2, [pc, #348]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ec:	4b55      	ldr	r3, [pc, #340]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	4a54      	ldr	r2, [pc, #336]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f023 0304 	bic.w	r3, r3, #4
 80030f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fed2 	bl	8001ea8 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe fece 	bl	8001ea8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0cb      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ee      	beq.n	8003108 <HAL_RCC_OscConfig+0x334>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fe febc 	bl	8001ea8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fe feb8 	bl	8001ea8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0b5      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	4b3e      	ldr	r3, [pc, #248]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ee      	bne.n	8003134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315c:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	4a38      	ldr	r2, [pc, #224]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003166:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a1 	beq.w	80032b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003172:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d05c      	beq.n	8003238 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d141      	bne.n	800320a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b31      	ldr	r3, [pc, #196]	@ (800324c <HAL_RCC_OscConfig+0x478>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fe8c 	bl	8001ea8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fe88 	bl	8001ea8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e087      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b27      	ldr	r3, [pc, #156]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	491b      	ldr	r1, [pc, #108]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <HAL_RCC_OscConfig+0x478>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fe61 	bl	8001ea8 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ea:	f7fe fe5d 	bl	8001ea8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e05c      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fc:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x416>
 8003208:	e054      	b.n	80032b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <HAL_RCC_OscConfig+0x478>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fe4a 	bl	8001ea8 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fe46 	bl	8001ea8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e045      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_RCC_OscConfig+0x470>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x444>
 8003236:	e03d      	b.n	80032b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e038      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
 8003244:	40023800 	.word	0x40023800
 8003248:	40007000 	.word	0x40007000
 800324c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x4ec>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d028      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d121      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d11a      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003288:	4293      	cmp	r3, r2
 800328a:	d111      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0cc      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b68      	ldr	r3, [pc, #416]	@ (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d90c      	bls.n	8003300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b65      	ldr	r3, [pc, #404]	@ (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b63      	ldr	r3, [pc, #396]	@ (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0b8      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b59      	ldr	r3, [pc, #356]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a58      	ldr	r2, [pc, #352]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003330:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a52      	ldr	r2, [pc, #328]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800333a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b50      	ldr	r3, [pc, #320]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	494d      	ldr	r1, [pc, #308]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d044      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b47      	ldr	r3, [pc, #284]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d119      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e07f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d003      	beq.n	8003382 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	2b03      	cmp	r3, #3
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b3f      	ldr	r3, [pc, #252]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e067      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b37      	ldr	r3, [pc, #220]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4934      	ldr	r1, [pc, #208]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fd78 	bl	8001ea8 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe fd74 	bl	8001ea8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e04f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b25      	ldr	r3, [pc, #148]	@ (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d20c      	bcs.n	800340c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b22      	ldr	r3, [pc, #136]	@ (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e032      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003418:	4b19      	ldr	r3, [pc, #100]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4916      	ldr	r1, [pc, #88]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	490e      	ldr	r1, [pc, #56]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800344a:	f000 f821 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800344e:	4602      	mov	r2, r0
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	490a      	ldr	r1, [pc, #40]	@ (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	5ccb      	ldrb	r3, [r1, r3]
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	4a09      	ldr	r2, [pc, #36]	@ (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003466:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fcd8 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00
 8003480:	40023800 	.word	0x40023800
 8003484:	08004dd8 	.word	0x08004dd8
 8003488:	2000004c 	.word	0x2000004c
 800348c:	20000050 	.word	0x20000050

08003490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b094      	sub	sp, #80	@ 0x50
 8003496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a8:	4b79      	ldr	r3, [pc, #484]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x40>
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	f200 80e1 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x34>
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x3a>
 80034c2:	e0db      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b73      	ldr	r3, [pc, #460]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x204>)
 80034c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034c8:	e0db      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ca:	4b73      	ldr	r3, [pc, #460]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x208>)
 80034cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ce:	e0d8      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034da:	4b6d      	ldr	r3, [pc, #436]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	2200      	movs	r2, #0
 80034ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	f04f 0000 	mov.w	r0, #0
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	0159      	lsls	r1, r3, #5
 8003510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003514:	0150      	lsls	r0, r2, #5
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4621      	mov	r1, r4
 800351c:	1a51      	subs	r1, r2, r1
 800351e:	6139      	str	r1, [r7, #16]
 8003520:	4629      	mov	r1, r5
 8003522:	eb63 0301 	sbc.w	r3, r3, r1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003534:	4659      	mov	r1, fp
 8003536:	018b      	lsls	r3, r1, #6
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800353e:	4651      	mov	r1, sl
 8003540:	018a      	lsls	r2, r1, #6
 8003542:	4651      	mov	r1, sl
 8003544:	ebb2 0801 	subs.w	r8, r2, r1
 8003548:	4659      	mov	r1, fp
 800354a:	eb63 0901 	sbc.w	r9, r3, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003562:	4690      	mov	r8, r2
 8003564:	4699      	mov	r9, r3
 8003566:	4623      	mov	r3, r4
 8003568:	eb18 0303 	adds.w	r3, r8, r3
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	462b      	mov	r3, r5
 8003570:	eb49 0303 	adc.w	r3, r9, r3
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003582:	4629      	mov	r1, r5
 8003584:	024b      	lsls	r3, r1, #9
 8003586:	4621      	mov	r1, r4
 8003588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800358c:	4621      	mov	r1, r4
 800358e:	024a      	lsls	r2, r1, #9
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003596:	2200      	movs	r2, #0
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800359c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035a0:	f7fc fe1a 	bl	80001d8 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ac:	e058      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b38      	ldr	r3, [pc, #224]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2200      	movs	r2, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	4611      	mov	r1, r2
 80035ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	f04f 0000 	mov.w	r0, #0
 80035d0:	f04f 0100 	mov.w	r1, #0
 80035d4:	0159      	lsls	r1, r3, #5
 80035d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035da:	0150      	lsls	r0, r2, #5
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4641      	mov	r1, r8
 80035e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003600:	ebb2 040a 	subs.w	r4, r2, sl
 8003604:	eb63 050b 	sbc.w	r5, r3, fp
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	464b      	mov	r3, r9
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003636:	4629      	mov	r1, r5
 8003638:	028b      	lsls	r3, r1, #10
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003640:	4621      	mov	r1, r4
 8003642:	028a      	lsls	r2, r1, #10
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	61fa      	str	r2, [r7, #28]
 8003650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003654:	f7fc fdc0 	bl	80001d8 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x204>)
 800367e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003684:	4618      	mov	r0, r3
 8003686:	3750      	adds	r7, #80	@ 0x50
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	007a1200 	.word	0x007a1200

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000004c 	.word	0x2000004c

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff0 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	@ (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08004de8 	.word	0x08004de8

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0b5b      	lsrs	r3, r3, #13
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	@ (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	08004de8 	.word	0x08004de8

08003704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e041      	b.n	800379a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f9ca 	bl	8001ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f000 fcba 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d001      	beq.n	80037bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e03c      	b.n	8003836 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <HAL_TIM_Base_Start+0xa0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d013      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003848 <HAL_TIM_Base_Start+0xa4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_TIM_Base_Start+0xa8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <HAL_TIM_Base_Start+0xac>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a16      	ldr	r2, [pc, #88]	@ (8003854 <HAL_TIM_Base_Start+0xb0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014000 	.word	0x40014000

08003858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d001      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e044      	b.n	80038fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1e      	ldr	r2, [pc, #120]	@ (8003908 <HAL_TIM_Base_Start_IT+0xb0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x6c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389a:	d013      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x6c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <HAL_TIM_Base_Start_IT+0xb4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x6c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a19      	ldr	r2, [pc, #100]	@ (8003910 <HAL_TIM_Base_Start_IT+0xb8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x6c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	@ (8003914 <HAL_TIM_Base_Start_IT+0xbc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x6c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <HAL_TIM_Base_Start_IT+0xc0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d010      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40014000 	.word	0x40014000

0800391c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <HAL_TIM_Base_Stop_IT+0x48>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	f240 4344 	movw	r3, #1092	@ 0x444
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_TIM_Base_Stop_IT+0x48>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e041      	b.n	8003a10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fe f8ff 	bl	8001ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f000 fb7f 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_TIM_PWM_Start+0x24>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e022      	b.n	8003a82 <HAL_TIM_PWM_Start+0x6a>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d109      	bne.n	8003a56 <HAL_TIM_PWM_Start+0x3e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	e015      	b.n	8003a82 <HAL_TIM_PWM_Start+0x6a>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d109      	bne.n	8003a70 <HAL_TIM_PWM_Start+0x58>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e008      	b.n	8003a82 <HAL_TIM_PWM_Start+0x6a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e068      	b.n	8003b5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_PWM_Start+0x82>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a98:	e013      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xaa>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x92>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aa8:	e00b      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xaa>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start+0xa2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ab8:	e003      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xaa>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fda2 	bl	8004614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	@ (8003b64 <HAL_TIM_PWM_Start+0x14c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d107      	bne.n	8003aea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_TIM_PWM_Start+0x14c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x10e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afc:	d013      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x10e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_TIM_PWM_Start+0x150>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x10e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <HAL_TIM_PWM_Start+0x154>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x10e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a16      	ldr	r2, [pc, #88]	@ (8003b70 <HAL_TIM_PWM_Start+0x158>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x10e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <HAL_TIM_PWM_Start+0x15c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d111      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d010      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	e007      	b.n	8003b5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40014000 	.word	0x40014000

08003b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d020      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01b      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0202 	mvn.w	r2, #2
 8003bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa5b 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa4d 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa5e 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0204 	mvn.w	r2, #4
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fa35 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa27 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa38 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0208 	mvn.w	r2, #8
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa0f 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa01 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fa12 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0210 	mvn.w	r2, #16
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2208      	movs	r2, #8
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9e9 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9db 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f9ec 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0201 	mvn.w	r2, #1
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fc40 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fd24 	bl	8004750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9bd 	bl	80040a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0220 	mvn.w	r2, #32
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fcf6 	bl	800473c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e0ae      	b.n	8003ed4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	f200 809f 	bhi.w	8003ec4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003ec5 	.word	0x08003ec5
 8003d94:	08003ec5 	.word	0x08003ec5
 8003d98:	08003ec5 	.word	0x08003ec5
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003ec5 	.word	0x08003ec5
 8003da4:	08003ec5 	.word	0x08003ec5
 8003da8:	08003ec5 	.word	0x08003ec5
 8003dac:	08003e43 	.word	0x08003e43
 8003db0:	08003ec5 	.word	0x08003ec5
 8003db4:	08003ec5 	.word	0x08003ec5
 8003db8:	08003ec5 	.word	0x08003ec5
 8003dbc:	08003e83 	.word	0x08003e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f9fe 	bl	80041c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0208 	orr.w	r2, r2, #8
 8003dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0204 	bic.w	r2, r2, #4
 8003dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6999      	ldr	r1, [r3, #24]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	619a      	str	r2, [r3, #24]
      break;
 8003dfe:	e064      	b.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fa44 	bl	8004294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6999      	ldr	r1, [r3, #24]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]
      break;
 8003e40:	e043      	b.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fa8f 	bl	800436c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0208 	orr.w	r2, r2, #8
 8003e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0204 	bic.w	r2, r2, #4
 8003e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	61da      	str	r2, [r3, #28]
      break;
 8003e80:	e023      	b.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fad9 	bl	8004440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	61da      	str	r2, [r3, #28]
      break;
 8003ec2:	e002      	b.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e0b4      	b.n	8004062 <HAL_TIM_ConfigClockSource+0x186>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f30:	d03e      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f36:	f200 8087 	bhi.w	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	f000 8086 	beq.w	800404e <HAL_TIM_ConfigClockSource+0x172>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	d87f      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b70      	cmp	r3, #112	@ 0x70
 8003f4a:	d01a      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xa6>
 8003f4c:	2b70      	cmp	r3, #112	@ 0x70
 8003f4e:	d87b      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b60      	cmp	r3, #96	@ 0x60
 8003f52:	d050      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f54:	2b60      	cmp	r3, #96	@ 0x60
 8003f56:	d877      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b50      	cmp	r3, #80	@ 0x50
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f5c:	2b50      	cmp	r3, #80	@ 0x50
 8003f5e:	d873      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b40      	cmp	r3, #64	@ 0x40
 8003f62:	d058      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x13a>
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d86f      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b30      	cmp	r3, #48	@ 0x30
 8003f6a:	d064      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	2b30      	cmp	r3, #48	@ 0x30
 8003f6e:	d86b      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d060      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d867      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d05c      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d05a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	e062      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f92:	f000 fb1f 	bl	80045d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	609a      	str	r2, [r3, #8]
      break;
 8003fae:	e04f      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc0:	f000 fb08 	bl	80045d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fd2:	609a      	str	r2, [r3, #8]
      break;
 8003fd4:	e03c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 fa7c 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2150      	movs	r1, #80	@ 0x50
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fad5 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e02c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004002:	461a      	mov	r2, r3
 8004004:	f000 fa9b 	bl	800453e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2160      	movs	r1, #96	@ 0x60
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fac5 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8004014:	e01c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	461a      	mov	r2, r3
 8004024:	f000 fa5c 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2140      	movs	r1, #64	@ 0x40
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fab5 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8004034:	e00c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f000 faac 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8004046:	e003      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e000      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800404e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a37      	ldr	r2, [pc, #220]	@ (80041ac <TIM_Base_SetConfig+0xf0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00f      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040da:	d00b      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a34      	ldr	r2, [pc, #208]	@ (80041b0 <TIM_Base_SetConfig+0xf4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <TIM_Base_SetConfig+0xf8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0x38>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a32      	ldr	r2, [pc, #200]	@ (80041b8 <TIM_Base_SetConfig+0xfc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a28      	ldr	r2, [pc, #160]	@ (80041ac <TIM_Base_SetConfig+0xf0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01b      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004114:	d017      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a25      	ldr	r2, [pc, #148]	@ (80041b0 <TIM_Base_SetConfig+0xf4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a24      	ldr	r2, [pc, #144]	@ (80041b4 <TIM_Base_SetConfig+0xf8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a23      	ldr	r2, [pc, #140]	@ (80041b8 <TIM_Base_SetConfig+0xfc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a22      	ldr	r2, [pc, #136]	@ (80041bc <TIM_Base_SetConfig+0x100>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a21      	ldr	r2, [pc, #132]	@ (80041c0 <TIM_Base_SetConfig+0x104>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0x8a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a20      	ldr	r2, [pc, #128]	@ (80041c4 <TIM_Base_SetConfig+0x108>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a0c      	ldr	r2, [pc, #48]	@ (80041ac <TIM_Base_SetConfig+0xf0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d103      	bne.n	8004186 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f043 0204 	orr.w	r2, r3, #4
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800

080041c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f023 0201 	bic.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 0302 	bic.w	r3, r3, #2
 8004210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <TIM_OC1_SetConfig+0xc8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10c      	bne.n	800423e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0308 	bic.w	r3, r3, #8
 800422a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <TIM_OC1_SetConfig+0xc8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40010000 	.word	0x40010000

08004294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 0210 	bic.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0320 	bic.w	r3, r3, #32
 80042de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <TIM_OC2_SetConfig+0xd4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10d      	bne.n	8004310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a15      	ldr	r2, [pc, #84]	@ (8004368 <TIM_OC2_SetConfig+0xd4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d113      	bne.n	8004340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800431e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000

0800436c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <TIM_OC3_SetConfig+0xd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10d      	bne.n	80043e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a14      	ldr	r2, [pc, #80]	@ (800443c <TIM_OC3_SetConfig+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d113      	bne.n	8004416 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40010000 	.word	0x40010000

08004440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800448a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <TIM_OC4_SetConfig+0x9c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d109      	bne.n	80044b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000

080044e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0210 	bic.w	r2, r3, #16
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800457a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f043 0307 	orr.w	r3, r3, #7
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2201      	movs	r2, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004674:	2302      	movs	r3, #2
 8004676:	e050      	b.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d013      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a18      	ldr	r2, [pc, #96]	@ (800472c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a13      	ldr	r2, [pc, #76]	@ (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10c      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000

0800473c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e042      	b.n	80047fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fab4 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	@ 0x24
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f82b 	bl	8004804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b0c0      	sub	sp, #256	@ 0x100
 800480a:	af00      	add	r7, sp, #0
 800480c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	ea40 0301 	orr.w	r3, r0, r1
 800482c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	431a      	orrs	r2, r3
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800485c:	f021 010c 	bic.w	r1, r1, #12
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800486a:	430b      	orrs	r3, r1
 800486c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487e:	6999      	ldr	r1, [r3, #24]
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	ea40 0301 	orr.w	r3, r0, r1
 800488a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad0 <UART_SetConfig+0x2cc>)
 8004894:	429a      	cmp	r2, r3
 8004896:	d005      	beq.n	80048a4 <UART_SetConfig+0xa0>
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad4 <UART_SetConfig+0x2d0>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d104      	bne.n	80048ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7fe ff1a 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 80048a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048ac:	e003      	b.n	80048b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7fe ff01 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80048b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c0:	f040 810c 	bne.w	8004adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	1891      	adds	r1, r2, r2
 80048dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048de:	415b      	adcs	r3, r3
 80048e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048e6:	4621      	mov	r1, r4
 80048e8:	eb12 0801 	adds.w	r8, r2, r1
 80048ec:	4629      	mov	r1, r5
 80048ee:	eb43 0901 	adc.w	r9, r3, r1
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004906:	4690      	mov	r8, r2
 8004908:	4699      	mov	r9, r3
 800490a:	4623      	mov	r3, r4
 800490c:	eb18 0303 	adds.w	r3, r8, r3
 8004910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004914:	462b      	mov	r3, r5
 8004916:	eb49 0303 	adc.w	r3, r9, r3
 800491a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800492a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800492e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004932:	460b      	mov	r3, r1
 8004934:	18db      	adds	r3, r3, r3
 8004936:	653b      	str	r3, [r7, #80]	@ 0x50
 8004938:	4613      	mov	r3, r2
 800493a:	eb42 0303 	adc.w	r3, r2, r3
 800493e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004948:	f7fb fc46 	bl	80001d8 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4b61      	ldr	r3, [pc, #388]	@ (8004ad8 <UART_SetConfig+0x2d4>)
 8004952:	fba3 2302 	umull	r2, r3, r3, r2
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	011c      	lsls	r4, r3, #4
 800495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004964:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800496c:	4642      	mov	r2, r8
 800496e:	464b      	mov	r3, r9
 8004970:	1891      	adds	r1, r2, r2
 8004972:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004974:	415b      	adcs	r3, r3
 8004976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800497c:	4641      	mov	r1, r8
 800497e:	eb12 0a01 	adds.w	sl, r2, r1
 8004982:	4649      	mov	r1, r9
 8004984:	eb43 0b01 	adc.w	fp, r3, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499c:	4692      	mov	sl, r2
 800499e:	469b      	mov	fp, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	eb1a 0303 	adds.w	r3, sl, r3
 80049a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049aa:	464b      	mov	r3, r9
 80049ac:	eb4b 0303 	adc.w	r3, fp, r3
 80049b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049c8:	460b      	mov	r3, r1
 80049ca:	18db      	adds	r3, r3, r3
 80049cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ce:	4613      	mov	r3, r2
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049de:	f7fb fbfb 	bl	80001d8 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad8 <UART_SetConfig+0x2d4>)
 80049ea:	fba3 2301 	umull	r2, r3, r3, r1
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2264      	movs	r2, #100	@ 0x64
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	1acb      	subs	r3, r1, r3
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049fe:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <UART_SetConfig+0x2d4>)
 8004a00:	fba3 2302 	umull	r2, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a30:	4641      	mov	r1, r8
 8004a32:	1851      	adds	r1, r2, r1
 8004a34:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a36:	4649      	mov	r1, r9
 8004a38:	414b      	adcs	r3, r1
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a48:	4659      	mov	r1, fp
 8004a4a:	00cb      	lsls	r3, r1, #3
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a52:	4651      	mov	r1, sl
 8004a54:	00ca      	lsls	r2, r1, #3
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a64:	464b      	mov	r3, r9
 8004a66:	460a      	mov	r2, r1
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a84:	460b      	mov	r3, r1
 8004a86:	18db      	adds	r3, r3, r3
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	eb42 0303 	adc.w	r3, r2, r3
 8004a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a9a:	f7fb fb9d 	bl	80001d8 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <UART_SetConfig+0x2d4>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	@ 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	3332      	adds	r3, #50	@ 0x32
 8004ab6:	4a08      	ldr	r2, [pc, #32]	@ (8004ad8 <UART_SetConfig+0x2d4>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	f003 0207 	and.w	r2, r3, #7
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4422      	add	r2, r4
 8004aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004acc:	e106      	b.n	8004cdc <UART_SetConfig+0x4d8>
 8004ace:	bf00      	nop
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	40011400 	.word	0x40011400
 8004ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aee:	4642      	mov	r2, r8
 8004af0:	464b      	mov	r3, r9
 8004af2:	1891      	adds	r1, r2, r2
 8004af4:	6239      	str	r1, [r7, #32]
 8004af6:	415b      	adcs	r3, r3
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004afe:	4641      	mov	r1, r8
 8004b00:	1854      	adds	r4, r2, r1
 8004b02:	4649      	mov	r1, r9
 8004b04:	eb43 0501 	adc.w	r5, r3, r1
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	00eb      	lsls	r3, r5, #3
 8004b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b16:	00e2      	lsls	r2, r4, #3
 8004b18:	4614      	mov	r4, r2
 8004b1a:	461d      	mov	r5, r3
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	18e3      	adds	r3, r4, r3
 8004b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b24:	464b      	mov	r3, r9
 8004b26:	eb45 0303 	adc.w	r3, r5, r3
 8004b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	008b      	lsls	r3, r1, #2
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b54:	4621      	mov	r1, r4
 8004b56:	008a      	lsls	r2, r1, #2
 8004b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b5c:	f7fb fb3c 	bl	80001d8 <__aeabi_uldivmod>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4b60      	ldr	r3, [pc, #384]	@ (8004ce8 <UART_SetConfig+0x4e4>)
 8004b66:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	011c      	lsls	r4, r3, #4
 8004b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	1891      	adds	r1, r2, r2
 8004b86:	61b9      	str	r1, [r7, #24]
 8004b88:	415b      	adcs	r3, r3
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b90:	4641      	mov	r1, r8
 8004b92:	1851      	adds	r1, r2, r1
 8004b94:	6139      	str	r1, [r7, #16]
 8004b96:	4649      	mov	r1, r9
 8004b98:	414b      	adcs	r3, r1
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba8:	4659      	mov	r1, fp
 8004baa:	00cb      	lsls	r3, r1, #3
 8004bac:	4651      	mov	r1, sl
 8004bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb2:	4651      	mov	r1, sl
 8004bb4:	00ca      	lsls	r2, r1, #3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004be8:	4649      	mov	r1, r9
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	4641      	mov	r1, r8
 8004bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	008a      	lsls	r2, r1, #2
 8004bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bfa:	f7fb faed 	bl	80001d8 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	4b38      	ldr	r3, [pc, #224]	@ (8004ce8 <UART_SetConfig+0x4e4>)
 8004c06:	fba3 2301 	umull	r2, r3, r3, r1
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2264      	movs	r2, #100	@ 0x64
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	1acb      	subs	r3, r1, r3
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	3332      	adds	r3, #50	@ 0x32
 8004c18:	4a33      	ldr	r2, [pc, #204]	@ (8004ce8 <UART_SetConfig+0x4e4>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c24:	441c      	add	r4, r3
 8004c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c76:	464b      	mov	r3, r9
 8004c78:	460a      	mov	r2, r1
 8004c7a:	eb42 0303 	adc.w	r3, r2, r3
 8004c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c98:	4649      	mov	r1, r9
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	008a      	lsls	r2, r1, #2
 8004ca6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004caa:	f7fb fa95 	bl	80001d8 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <UART_SetConfig+0x4e4>)
 8004cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	2164      	movs	r1, #100	@ 0x64
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	3332      	adds	r3, #50	@ 0x32
 8004cc6:	4a08      	ldr	r2, [pc, #32]	@ (8004ce8 <UART_SetConfig+0x4e4>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4422      	add	r2, r4
 8004cda:	609a      	str	r2, [r3, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce8:	51eb851f 	.word	0x51eb851f

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	@ (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 f818 	bl	8004d44 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08004df8 	.word	0x08004df8
 8004d38:	08004df8 	.word	0x08004df8
 8004d3c:	08004df8 	.word	0x08004df8
 8004d40:	08004dfc 	.word	0x08004dfc

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
